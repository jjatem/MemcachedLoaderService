<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMemcached.Client</name>
    </assembly>
    <members>
        <member name="T:NMemcached.Client.TextConnection">
            <summary>
            A memcached server connection using the text protocol
            </summary>
        </member>
        <member name="T:NMemcached.Client.ServerConnection">
            <summary>
            A base class for a connection to a single memcached server
            </summary>
            <remarks>
            <para>
            The ServerConnection is a more specialized MemcachedConnection that represents a
            connection to a single Memcached server. The connections that communicate on the
            text and binary Memcached protocols both inherit from ServerConnection.
            </para>
            </remarks>
        </member>
        <member name="T:NMemcached.Client.MemcachedConnection">
            <summary>
            A base class for creating a connection to Memcached.
            </summary>
            <remarks>
            <para>
            MemcachedConnection is the abstract base class for connections to Memcached servers. It is not
            intended to be represetative of a single server connection but an abstraction of the operations
            required to interact with Memcached.
            </para>
            <para>
            Special Note: The predefined subclasses of MemcachedConnection do not allow for expirations
            greater than 30 days. The Memcached documentation states that expiration durations greater than
            30 days are treated as Unix timestamps, but this is not the observed behavior. Memcached uses
            Unix timestamps no matter the expiration time and certain implementations will throw exceptoins
            if the expiration time is greater than 30 days.
            </para>
            <para>
            The MemcachedConnection class supports the folowing cache operations:
            <para>
            Storage Commands
            </para>
            <list type="bullet">
                <item>
                    <term>Add</term>
                    <description>Inserts a key/value pair into the cache if the data does not already exist.</description>
                </item>
                <item>
                    <term>Append</term>
                    <description>Adds data to the end of an existing cache entry.</description>
                </item>
                <item>
                    <term>Check and Set (CAS)</term>
                    <description>Stores data for an existing key only if it has not been updated since the last get operation.</description>
                </item>
                <item>
                    <term>Prepend</term>
                    <description>Adds data to the begining of an existing cache entry.</description>
                </item>
                <item>
                    <term>Replace</term>
                    <description>Replaces the value of an existing cache entry with new data.</description>
                </item>
                <item>
                    <term>Set</term>
                    <description>Inserts an item into the cache overwriting any existing entry with the same key.</description>
                </item>
            </list>
            <para>
            Retrieval Commands
            </para>
            <list type="bullet">
                <item>
                    <term>Get</term>
                    <description>Reads one or more entries from the cache.</description>
                </item>
                <item>
                    <term>GetWitDetail</term>
                    <description>Reads one or more entries from the cache with additional details about the cache entry.</description>
                </item>
            </list>
            <para>
            Other Commands
            </para>
            <list type="bullet">
                <item>
                    <term>Delete</term>
                    <description>Removes an item from the cache.</description>
                </item>
                <item>
                    <term>Decrement</term>
                    <description>Reduces a numeric cache entry by a specified amount.</description>
                </item>
                <item>
                    <term>Flush</term>
                    <description>Removes all entries from the cache.</description>
                </item>
                <item>
                    <term>FlushAll</term>
                    <description>Removes all entries from the cache after a specified delay.</description>
                </item>
                <item>
                    <term>Increment</term>
                    <description>Increases a numeric cache entry by a specified amount.</description>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.#ctor">
            <summary>
            Initializes a new instance of the MemcachedConnection class
            </summary>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Add(System.String,System.Object,System.DateTime)">
            <summary>
            When overridden in a derived class, adds a key/value pair to a Memcached server if the data does not already exist.
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Append(System.String,System.Object)">
            <summary>
            When overridden in a derived class, adds data to an existing cache entry after the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.CheckAndSet(System.String,System.Object,System.DateTime,System.UInt64)">
            <summary>
            When overridden in a derived class, stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="casUnique">The unique check and store value of an an existing entry</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Close">
            <summary>
            Closes the connection to the Memcached server
            </summary>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Decrement(System.String,System.UInt64)">
            <summary>
            When overridden in a derived class, decreases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is decremented</param>
            <returns>The new value of the data after the decrement operation was carried out</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Delete(System.String)">
            <summary>
            When overridden in a derived class, removes a cache entry
            </summary>
            <param name="key">The key of the entry to be deleted</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.FlushAll">
            <summary>
            When overridden in a derived class, immediately invalidates all cached items in all servers
            </summary>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.FlushAll(System.TimeSpan)">
            <summary>
            When overridden in a derived class, invalidates all cached items in all servers after the specified delay
            </summary>
            <param name="delay">The amount of time to pause prior to executing the "flush_all" command.</param>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error.</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Get(System.String)">
            <summary>
            When overridden in a derived class, reads a single entry from the cache
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Get(System.String[])">
            <summary>
            When overridden in a derived class, reads multiple entries from the cache
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.GetWithDetail(System.String)">
            <summary>
            When overridden in a derived class, reads a single entry from the cache and returns the data with detail information
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key with detail information</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.GetWithDetail(System.String[])">
            <summary>
            When overridden in a derived class, reads multiple entries from the cache with detail information
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache with detail information</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Increment(System.String,System.UInt64)">
            <summary>
            When overridden in a derived class, increases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is incremented</param>
            <returns>The new value of the data after the increment operation was carried out</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Prepend(System.String,System.Object)">
            <summary>
            When overridden in a derived class, adds data to an existing cache entry before the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Replace(System.String,System.Object,System.DateTime)">
            <summary>
            When overridden in a derived class, replaces the data associated with an existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Set(System.String,System.Object,System.DateTime)">
            <summary>
            When overridden in a derived class, adds data to the cache, overwriting any data in an existing entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to a Memcached server if the data does not already exist.
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a key/value pair to a Memcached server if the data does not already exist.
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The length of time the entry exists in the cache before it expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key and/or expiration are null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.CheckAndSet(System.String,System.Object,System.UInt64)">
            <summary>
            Stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="casUnique">The unique value of an an existing entry</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.CheckAndSet(System.String,System.Object,System.TimeSpan,System.UInt64)">
            <summary>
            When overridden in a derived class, stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The length of time the entry exists in the cache before it expires</param>
            <param name="casUnique">The unique check and store value of an an existing entry</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key and/or expiration are null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Replace(System.String,System.Object)">
            <summary>
            Replaces the data associated with an existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Replace(System.String,System.Object,System.TimeSpan)">
            <summary>
            When overridden in a derived class, replaces the data associated with an existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The length of time the entry exists in the cache before it expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key and/or expiration are null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Set(System.String,System.Object)">
            <summary>
            Adds data to the cache, overwriting any data in an existing entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedConnection.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds data to the cache, overwriting any data in an existing entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The length of time the entry exists in the cache before it expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key and/or expiration are null</exception>
        </member>
        <member name="P:NMemcached.Client.MemcachedConnection.UseUTC">
            <summary>
            Gets or sets a value that determines if UTC time is used for TimeSpan based expirations
            </summary>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.#ctor(System.Net.TransportType,System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the ServerConnection class
            </summary>
            <param name="transportType">The transport protocol used by the connection</param>
            <param name="remoteEp">The remote end point of the memcached server</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.#ctor(System.Net.TransportType,System.Net.EndPoint,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the ServerConnection class
            </summary>
            <param name="transportType">The transport protocol used by the connection</param>
            <param name="remoteEp">The remote end point of the memcached server</param>
            <param name="protocolEncoding">The character encoding for string data sent to and read from the server</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.#ctor(System.Net.TransportType,System.Net.EndPoint,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the ServerConnection class
            </summary>
            <param name="transportType">The transport protocol used by the connection</param>
            <param name="remoteEp">The remote end point of the memcached server</param>
            <param name="protocolEncoding">The character encoding for string data sent to and read from the server</param>
            <param name="useCompression">Determines if non primitive data is compressed when sent to or decompressed when read from the server</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.Stats">
            <summary>
            When overridden in a derived class, reads the cache statistics for the server
            </summary>
            <returns>The server statistics</returns>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.Version">
            <summary>
            When overridden in a derived class, gets the version numbers of the server
            </summary>
            <returns>A string representation of the memcached server version number</returns>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.Close">
            <summary>
            Closes the connection to the Memcached server
            </summary>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.Dispose">
            <summary>
            Releases the unmanaged resources used by the ServerConnection
            </summary>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.ToString">
            <summary>
            Returns a string representation of the ServerConnection
            </summary>
            <returns>A string representation of the ServerConnection</returns>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ServerConnection, and optionally disposes of the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.GetExpirationTime(System.DateTime)">
            <summary>
            Gets the number of seconds to allow a cached item to live up to a maximum of 30 days.
            </summary>
            <param name="expiration">The DateTime in the future when the item is to expire</param>
            <returns>The total number of seconds up to a maximum of 30 days</returns>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.Reset">
            <summary>
            Resets the socket connection to the server
            </summary>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.SendCommand(System.Byte[])">
            <summary>
            Sends a command to the server
            </summary>
            <param name="command">The command to be sent to the server</param>
            <returns>The server response as an array of bytes, or null if no response is required</returns>
        </member>
        <member name="M:NMemcached.Client.ServerConnection.SendCommandBatch(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sends a batch of commands to the server
            </summary>
            <param name="commandBatch">A collection of commands to be sent to the server</param>
            <returns>A collection of server responses</returns>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.PayloadEncoding">
            <summary>
            Gets or sets the encoding for string data written to and received from the cache
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.ProtocolEncoding">
            <summary>
            Gets or sets the encoding for strings used in Memcached commands
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.ReceiveTimeout">
            <summary>
            Gets or sets the number of milliseconds after wich the receive call will time out
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.SendTimeout">
            <summary>
            Gets or sets the number of milliseconds after which the send call will time out
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.UseCompression">
            <summary>
            Gets or sets a value that determines if data sent to the cache is compressed
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.Compressor">
            <summary>
            Gets or sets the ICompressor responsible for compression and decompression of cache content
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.Serializer">
            <summary>
            Gets or sets the ISerializer responsible for serialization and deserialization of objects written to and read from the cache
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.TransportType">
            <summary>
            Gets the transport type of the connection
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnection.RemoteEndPoint">
            <summary>
            Gets the remote end point of the memcached server
            </summary>
        </member>
        <member name="M:NMemcached.Client.TextConnection.#ctor(System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the TextConnection class
            </summary>
            <param name="remoteEp">The end point of the memcached server</param>
        </member>
        <member name="M:NMemcached.Client.TextConnection.#ctor(System.Net.EndPoint,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the TextConnection class
            </summary>
            <param name="remoteEp">The end point of the memcached server</param>
            <param name="encoding">The character encoding for string data sent to and read from the server</param>
        </member>
        <member name="M:NMemcached.Client.TextConnection.#ctor(System.Net.EndPoint,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the TextConnection class
            </summary>
            <param name="remoteEp">The end point of the memcached server</param>
            <param name="encoding">The character encoding for string data sent to and read from the server</param>
            <param name="useCompression">Determines if data to be sent to the server is compressed</param>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Adds a key/value pair to a Memcached server if the data does not already exist.
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Append(System.String,System.Object)">
            <summary>
            Adds data to an existing cache entry after the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.CheckAndSet(System.String,System.Object,System.DateTime,System.UInt64)">
            <summary>
            Stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="casUnique">The unique value of an an existing entry</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Close">
            <summary>
            Closes the connection to the Memcached server by sending the "quit" command
            </summary>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Decrement(System.String,System.UInt64)">
            <summary>
            Decreases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is decremented</param>
            <returns>The new value of the data after the decrement operation was carried out</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Delete(System.String)">
            <summary>
            Removes a cache entry
            </summary>
            <param name="key">The key of the entry to be deleted</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.FlushAll">
            <summary>
            Immediately invalidates all cached items in all servers
            </summary>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.TextConnection.FlushAll(System.TimeSpan)">
            <summary>
            Invalidates all cached items in all servers after the specified delay
            </summary>
            <param name="delay">The amount of time to pause prior to executing the "flush_all" command.</param>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error.</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Get(System.String)">
            <summary>
            Reads a single entry from the cache
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Get(System.String[])">
            <summary>
            Reads multiple entries from the cache
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.GetWithDetail(System.String)">
            <summary>
            Reads a single entry from the cache and returns the data with detail information
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key with detail information</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.GetWithDetail(System.String[])">
            <summary>
            Reads multiple entries from the cache with detail information
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache with detail information</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Increment(System.String,System.UInt64)">
            <summary>
            Increases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is incremented</param>
            <returns>The new value of the data after the increment operation was carried out</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Prepend(System.String,System.Object)">
            <summary>
            Adds data to an existing cache entry before the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Replace(System.String,System.Object,System.DateTime)">
            <summary>
            Replaces the data associated with an existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Set(System.String,System.Object,System.DateTime)">
            <summary>
            Adds data to the cache, overwriting any data in an existing entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Stats">
            <summary>
            Reads the cache statistics for the server
            </summary>
            <returns>The server statistics</returns>
        </member>
        <member name="M:NMemcached.Client.TextConnection.Version">
            <summary>
            Gets the version numbers of the server
            </summary>
            <returns>A string representation of the memcached server version number</returns>
        </member>
        <member name="T:Common.Logging.Simple.NamespaceDoc">
            <summary>
            This namespace contains out-of-the-box adapters to intrinsic systems, namely
            <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter"/> and <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter"/>.
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.ConsoleOutLogger">
            <summary>
            Sends log messages to <see cref="P:System.Console.Out"/>.
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="T:Common.Logging.Simple.AbstractSimpleLogger">
            <summary>
            Abstract class providing a standard implementation of simple loggers.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Common.Logging.Factory.AbstractLogger">
            <summary>
            Provides base implementation common for most logger adapters
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Common.Logging.ILog">
            <summary>
            A simple logging interface abstracting logging APIs. 
            </summary>
            <remarks>
            <para>
            Implementations should defer calling a message's <see cref="M:System.Object.ToString"/> until the message really needs
            to be logged to avoid performance penalties.
            </para>
            <para>
            Each <see cref="T:Common.Logging.ILog"/> log method offers to pass in a <see cref="T:System.Action`1"/> instead of the actual message.
            Using this style has the advantage to defer possibly expensive message argument evaluation and formatting (and formatting arguments!) until the message gets
            actually logged. If the message is not logged at all (e.g. due to <see cref="T:Common.Logging.LogLevel"/> settings), 
            you won't have to pay the peformance penalty of creating the message.
            </para>
            </remarks>
            <example>
            The example below demonstrates using callback style for creating the message, where the call to the 
            <see cref="M:System.Random.NextDouble"/> and the underlying <see cref="M:System.String.Format(System.String,System.Object[])"/> only happens, if level <see cref="F:Common.Logging.LogLevel.Debug"/> is enabled:
            <code>
            Log.Debug( m=&gt;m("result is {0}", random.NextDouble()) );
            Log.Debug(delegate(m) { m("result is {0}", random.NextDouble()); });
            </code>
            </example>
            <seealso cref="T:System.Action`1"/>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.ILog.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.ILog.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:Common.Logging.ILog.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:Common.Logging.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:Common.Logging.ILog.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:Common.Logging.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="P:Common.Logging.ILog.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
        </member>
        <member name="P:Common.Logging.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
        </member>
        <member name="P:Common.Logging.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
        </member>
        <member name="P:Common.Logging.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
        </member>
        <member name="P:Common.Logging.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
        </member>
        <member name="P:Common.Logging.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
        </member>
        <member name="F:Common.Logging.Factory.AbstractLogger.Write">
            <summary>
            Holds the method for writing a message to the log system.
            </summary>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.#ctor">
            <summary>
            Creates a new logger instance using <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)"/> for 
            writing log events to the underlying log system.
            </summary>
            <seealso cref="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler"/>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <summary>
            Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)"/> 
            for writing log events to the underlying log system.
            </summary>
            <remarks>
            Usually you don't need to override thise method. The default implementation returns
            <c>null</c> to indicate that the default handler <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)"/> should be 
            used.
            </remarks>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Actually sends the message to the underlying log system.
            </summary>
            <param name="level">the level of this log event.</param>
            <param name="message">the message to log</param>
            <param name="exception">the exception to log (may be null)</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug"/> level including
            the stack Debug of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info"/> level including
            the stack Info of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn"/> level including
            the stack Warn of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error"/> level including
            the stack Error of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level including
            the stack Fatal of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="P:Common.Logging.Factory.AbstractLogger.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:Common.Logging.Factory.AbstractLogger.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:Common.Logging.Factory.AbstractLogger.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:Common.Logging.Factory.AbstractLogger.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:Common.Logging.Factory.AbstractLogger.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:Common.Logging.Factory.AbstractLogger.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="T:Common.Logging.Factory.AbstractLogger.WriteHandler">
            <summary>
            Represents a method responsible for writing a message to the log system.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.AbstractSimpleLogger.#ctor(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and initializes a the simple logger.
            </summary>
            <param name="logName">The name, usually type name of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showlevel">Include level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:Common.Logging.Simple.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder">the <see cref="T:System.Text.StringBuilder"/> that receíves the formatted message.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.AbstractSimpleLogger.IsLevelEnabled(Common.Logging.LogLevel)">
            <summary>
            Determines if the given log level is currently enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.Name">
            <summary>
            The name of the logger.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLevel">
            <summary>
            Include the current log level in the log message.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.ShowDateTime">
            <summary>
            Include the current time in the log message.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLogName">
            <summary>
            Include the instance name in the log message.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.CurrentLogLevel">
            <summary>
            The current logging threshold. Messages recieved that are beneath this threshold will not be logged.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat">
            <summary>
            The date and time format to use in the log message.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.HasDateTimeFormat">
            <summary>
            Determines Whether <see cref="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat"/> is set.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsTraceEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Trace"/>. If it is, all messages will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsDebugEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Debug"/>. If it is, all messages will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsInfoEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Info"/>. If it is, only messages with a <see cref="T:Common.Logging.LogLevel"/> of
            <see cref="F:Common.Logging.LogLevel.Info"/>, <see cref="F:Common.Logging.LogLevel.Warn"/>, <see cref="F:Common.Logging.LogLevel.Error"/>, and 
            <see cref="F:Common.Logging.LogLevel.Fatal"/> will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsWarnEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Warn"/>. If it is, only messages with a <see cref="T:Common.Logging.LogLevel"/> of
            <see cref="F:Common.Logging.LogLevel.Warn"/>, <see cref="F:Common.Logging.LogLevel.Error"/>, and <see cref="F:Common.Logging.LogLevel.Fatal"/> 
            will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsErrorEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Error"/>. If it is, only messages with a <see cref="T:Common.Logging.LogLevel"/> of
            <see cref="F:Common.Logging.LogLevel.Error"/> and <see cref="F:Common.Logging.LogLevel.Fatal"/> will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsFatalEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Fatal"/>. If it is, only messages with a <see cref="T:Common.Logging.LogLevel"/> of
            <see cref="F:Common.Logging.LogLevel.Fatal"/> will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.ConsoleOutLogger.#ctor(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="logName">The name, usually type name of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showLevel">Include the current log level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:Common.Logging.Simple.ConsoleOutLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder"/> then
            sending the output to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="level">The <see cref="T:Common.Logging.LogLevel"/> of the message.</param>
            <param name="message">The log message.</param>
            <param name="e">An optional <see cref="T:System.Exception"/> associated with the message.</param>
        </member>
        <member name="T:Common.Logging.Simple.CapturingLogger">
            <summary>
            A logger created by <see cref="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter"/> that 
            sends all log events to the owning adapter's <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)"/>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLogger.Owner">
            <summary>
            The adapter that created this logger instance.
            </summary>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLogger.LastEvent">
            <summary>
             Allows to retrieve the last logged event instance captured by this logger
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLogger.#ctor(Common.Logging.Simple.CapturingLoggerFactoryAdapter,System.String)">
            <summary>
            Create a new logger instance.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Create a new <see cref="T:Common.Logging.Simple.CapturingLoggerEvent"/> and send it to <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)"/>
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:NMemcached.Client.ExtensionMethods">
            <summary>
            A container for extension methods. This class is not intented to be used directly.
            </summary>
        </member>
        <member name="M:NMemcached.Client.ExtensionMethods.CalculateDistributionStatistics(NMemcached.Client.IConnectionProvider,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Calculates the key distribution percentages for an IConnectionProvider instance
            </summary>
            <param name="connectionProvider">The IConnectionProvider being tested</param>
            <param name="keys">The keys for which the statistics are calculated</param>
            <returns>A collection that contains the percentage of keys distributed to each server</returns>
            <remarks>
            <para>The distribution percentages are determined by calling IConnectionProvider.GetConnection for each key specified. No commands are sent though the connection returned.</para>
            </remarks>
        </member>
        <member name="T:NMemcached.Client.ConnectionProvider">
            <summary>
            The default IConnectionProvider implementation.
            </summary>
            <remarks>
            <para>The ConnectionProvider uses the "ketama" method for consistent hashing of cache keys</para>
            <para>Information on the "ketama" method can be found at "http://chris.de/plugin/tag/ketama"</para>
            </remarks>
        </member>
        <member name="T:NMemcached.Client.IConnectionProvider">
            <summary>
            Defines the elements required to provide memcached server connections
            </summary>
        </member>
        <member name="M:NMemcached.Client.IConnectionProvider.Close">
            <summary>
            Closes all server connections
            </summary>
        </member>
        <member name="M:NMemcached.Client.IConnectionProvider.GetConnection(System.String)">
            <summary>
            Gets a server connection for the specified key
            </summary>
            <param name="key">The key of the cache entry</param>
            <returns>A server connection for the specified key</returns>
        </member>
        <member name="M:NMemcached.Client.IConnectionProvider.GetConnections(System.String[])">
            <summary>
            Gets the server connection for the specified keys
            </summary>
            <param name="keys">The keys of the cache entries</param>
            <returns>A dictionary of server connection to cache key mappings</returns>
        </member>
        <member name="M:NMemcached.Client.IConnectionProvider.MarkDown(NMemcached.Client.ServerConnection)">
            <summary>
            Removes a connection from the list of available servers
            </summary>
            <param name="connection">The connection to remove</param>
        </member>
        <member name="M:NMemcached.Client.IConnectionProvider.DisableConnection(NMemcached.Client.ServerConnection)">
            <summary>
            Removes a connection from the list of available servers
            </summary>
            <param name="connection">The connection to remove</param>
        </member>
        <member name="P:NMemcached.Client.IConnectionProvider.Servers">
            <summary>
            Gets a collection of available servers
            </summary>
        </member>
        <member name="P:NMemcached.Client.IConnectionProvider.Unavailable">
            <summary>
            Gets a collection of unavailable servers
            </summary>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.#ctor(System.Collections.Generic.IEnumerable{NMemcached.Client.ServerConnection})">
            <summary>
            Initalizes a new instance of the ConnectionProvider class
            </summary>
            <param name="servers">A collection of server connections for the provider</param>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.#ctor(System.Collections.Generic.IEnumerable{NMemcached.Client.ServerConnection},System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initalizes a new instance of the ConnectionProvider class
            </summary>
            <param name="servers">A collection of server connections for the provider</param>
            <param name="hashAlgorithm">The hash algorithm used to hash the keys</param>
            <exception cref="T:System.ArgumentNullException">A null server name was found in the collection</exception>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.Close">
            <summary>
            Closes all server connections
            </summary>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.GetConnection(System.String)">
            <summary>
            Gets a server connection for the specified key
            </summary>
            <param name="key">The key of the cache entry</param>
            <returns>A server connection for the specified key</returns>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.GetConnections(System.String[])">
            <summary>
            Gets the server connections for the specified keys
            </summary>
            <param name="keys">The keys of the cache entries</param>
            <returns>A dictionary of server connection to cache key mappings</returns>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.MarkDown(NMemcached.Client.ServerConnection)">
            <summary>
            Removes a connection from the list of available servers
            </summary>
            <param name="connection">The connection to remove</param>
            <exception cref="T:System.ArgumentNullException">A null server name was found in the collection</exception>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.DisableConnection(NMemcached.Client.ServerConnection)">
            <summary>
            Removes a connection from the list of available servers
            </summary>
            <param name="connection">The connection to remove</param>
            <exception cref="T:System.ArgumentNullException">A null server name was found in the collection</exception>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.Dispose">
            <summary>
            Releases the unmanaged resources used by the ConnectionProvider
            </summary>
        </member>
        <member name="M:NMemcached.Client.ConnectionProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ConnectionProvider, and optionally disposes of the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources</param>
        </member>
        <member name="P:NMemcached.Client.ConnectionProvider.HashAlgorithm">
            <summary>
            Gets or sets the hash algorithm used to get a server connection
            </summary>
        </member>
        <member name="P:NMemcached.Client.ConnectionProvider.PollingInterval">
            <summary>
            Gets or sets the interval at which dead servers are checked for activity
            </summary>
        </member>
        <member name="P:NMemcached.Client.ConnectionProvider.Servers">
            <summary>
            Gets a collection of available servers
            </summary>
        </member>
        <member name="P:NMemcached.Client.ConnectionProvider.Unavailable">
            <summary>
            Gets a collection of unavailable servers
            </summary>
        </member>
        <member name="T:NMemcached.Client.Binary.EndianBinaryWriter">
            <summary>
            Writes primitive types in binary with the specified endianness to a stream and supports writing strings in a specific encoding.
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the EndianBinaryWriter class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the EndianBinaryWriter class based on the supplied stream.
            </summary>
            <param name="output">The stream to which data is written</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the EndianBinaryWriter class based on the supplied stream and specific character encoding.
            </summary>
            <param name="output">The stream to which data is written</param>
            <param name="encoding">The character encoding for strings written to the output</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.#ctor(System.IO.Stream,NMemcached.Client.Endian)">
            <summary>
            Initializes a new instance of the EndianBinaryWriter class based on the supplied stream and endianness.
            </summary>
            <param name="output">The stream to which data is written</param>
            <param name="endian">A value the determines the mode of operation for the binary writer</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,NMemcached.Client.Endian)">
            <summary>
            Initializes a new instance of the EndianBinaryWriter class based on the supplied stream, a specific character encoding, and endianness.
            </summary>
            <param name="output">The stream to which data is written</param>
            <param name="encoding">The character encoding for strings written to the output</param>
            <param name="endian">A value the determines the mode of operation for the binary writer</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value and advances the stream position by 16 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.Double)">
            <summary>
            Writes a double precision value and advances the stream position by 8 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a signed short integer value and advances the stream position by 2 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a signed integer value and advances the stream position by 4 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.Int64)">
            <summary>
            Writes a signed long integer value and advances the stream position by 8 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.Single)">
            <summary>
            Writes a single precision value and advances the stream position by 4 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes an unsigned short integer value and advances the stream position by 2 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes an unsinged integer value and advances the stream position by 4 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes an unsigned long integer value and advances the stream position by 8 bytes
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="P:NMemcached.Client.Binary.EndianBinaryWriter.Endian">
            <summary>
            Gets or sets the endian mode of the binary writer
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.KeyedMemecachedActivity">
            <summary>
            Provides an abstract base class for Memcached activities requiring a cache key
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.MemcachedActivity">
            <summary>
            Provides an abstract base class for Memcached activities
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.MemcachedActivity.#ctor">
            <summary>
            Initializes a new instance of the MemcachedActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.MemcachedActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.MemcachedActivity.Connection">
            <summary>
            Gets or sets the connection used to issue commands
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.MemcachedActivity.CacheConnection">
            <summary>
            Gets or sets the connection for use by inherited classes
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.KeyedMemecachedActivity.#ctor">
            <summary>
            Initializes a new instance of the KeyedMemecachedActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.KeyedMemecachedActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.KeyedMemecachedActivity.Key">
            <summary>
            Gets or sets the cache key
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.KeyedMemecachedActivity.CacheKey">
            <summary>
            Gets or sets the cache key for use by derived classes
            </summary>
        </member>
        <member name="T:NMemcached.Client.Text.TextGetDetails">
            <summary>
            A data structure that contains details from a text response
            </summary>
        </member>
        <member name="M:NMemcached.Client.Text.TextGetDetails.#ctor">
            <summary>
            Initializes a new instance of the TextGetDetails class
            </summary>
        </member>
        <member name="P:NMemcached.Client.Text.TextGetDetails.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="P:NMemcached.Client.Text.TextGetDetails.Flags">
            <summary>
            Gets or sets the storage flags
            </summary>
        </member>
        <member name="P:NMemcached.Client.Text.TextGetDetails.Size">
            <summary>
            Gets or sets the content size
            </summary>
        </member>
        <member name="P:NMemcached.Client.Text.TextGetDetails.CasUnique">
            <summary>
            Gets or sets the check and set unique value
            </summary>
        </member>
        <member name="T:NMemcached.Client.OpCode">
            <summary>
            Defines the operation code constants for all binary commands
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Get">
            <summary>
            Get an item from the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Set">
            <summary>
            Set an item in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Add">
            <summary>
            Add an item to the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Replace">
            <summary>
            Replace an item in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Delete">
            <summary>
            Delete an item from the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Increment">
            <summary>
            Increment a value in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Decrement">
            <summary>
            Decrement a value in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Quit">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Flush">
            <summary>
            Flush all items from the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.GetQuietly">
            <summary>
            Get an item from the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.NoOperation">
            <summary>
            No operation
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Version">
            <summary>
            Get the version of the server
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.GetWithKey">
            <summary>
            Get an item from the cache with its key
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.GetWithKeyQuietly">
            <summary>
            Get an item from the cache with its key with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Append">
            <summary>
            Append a value to an entry in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Prepend">
            <summary>
            Prepend a value to an entry in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.Stat">
            <summary>
            Get the statistics for the server
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.SetQuietly">
            <summary>
            Set an item in the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.AddQuietly">
            <summary>
            Add an item to the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.ReplaceQuietly">
            <summary>
            Replace an item in the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.DeleteQuietly">
            <summary>
            Delete an item from the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.IncrementQuietly">
            <summary>
            Increment a value in the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.DecrementQuietly">
            <summary>
            Decrement a value in the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.QuitQuietly">
            <summary>
            Close the connection with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.FlushQuietly">
            <summary>
            Flush all items from the cache with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.AppendQuietly">
            <summary>
            Append a value to a cache entry with no response
            </summary>
        </member>
        <member name="F:NMemcached.Client.OpCode.PrependQuietly">
            <summary>
            Prepend a value to a cache entry with no response
            </summary>
        </member>
        <member name="T:NMemcached.Client.ISerializer">
            <summary>
            Defines methods required to serialize and deserialize to and from a sequence of bytes
            </summary>
        </member>
        <member name="M:NMemcached.Client.ISerializer.Serialize(System.Object)">
            <summary>
            Serializes an object into a sequence of bytes
            </summary>
            <param name="data">The data to serialize</param>
            <returns>The serialized object as a sequence of bytes</returns>
        </member>
        <member name="M:NMemcached.Client.ISerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes a sequence of bytes into a collection of objects
            </summary>
            <param name="data">The sequence of bytes to deserialize</param>
            <returns>A collection of objects deserialized from the sequence of bytes</returns>
        </member>
        <member name="T:NMemcached.Client.ConnectionEventArgs">
            <summary>
            Provides data for MemcachedClient connection events
            </summary>
        </member>
        <member name="M:NMemcached.Client.ConnectionEventArgs.#ctor(NMemcached.Client.ServerConnection)">
            <summary>
            Initializes a new instance of the ConnectionEventArgs class
            </summary>
            <param name="connection">The connection for the event</param>
        </member>
        <member name="M:NMemcached.Client.ConnectionEventArgs.#ctor(NMemcached.Client.ServerConnection,System.Net.Sockets.SocketException)">
            <summary>
            Initializes a new instance of the ConnectionEventArgs class
            </summary>
            <param name="connection">The connection for the event</param>
            <param name="socketException">The socket exception for the event</param>
        </member>
        <member name="P:NMemcached.Client.ConnectionEventArgs.Connection">
            <summary>
            Gets the connection for the event
            </summary>
        </member>
        <member name="P:NMemcached.Client.ConnectionEventArgs.SocketException">
            <summary>
            Gets the socket exception, if any, for the event
            </summary>
        </member>
        <member name="T:NMemcached.Client.Configuration.NMemcachedConfiguration">
            <summary>
            Creates a MemcachedClient object from the nmemcached.client configuration section.
            </summary>
        </member>
        <member name="M:NMemcached.Client.Configuration.NMemcachedConfiguration.CreateClient">
            <summary>
            Creates a MemcachedClient object from the nmemcached.client configuration section.
            </summary>
            <returns>A MemcachedClient object</returns>
        </member>
        <member name="T:NMemcached.Client.Endian">
            <summary>
            Defines endian values for binary operations.
            </summary>
        </member>
        <member name="F:NMemcached.Client.Endian.Big">
            <summary>
            Indicates that binary operations are big-endian
            </summary>
        </member>
        <member name="F:NMemcached.Client.Endian.Little">
            <summary>
            Indicates that binary operaitons are little-endian
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter">
            <summary>
            An adapter, who's loggers capture all log events and send them to <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)"/>. 
            Retrieve the list of log events from <see cref="F:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LoggerEvents"/>.
            </summary>
            <remarks>
            This logger factory is mainly for debugging and test purposes.
            <example>
            This is an example how you might use this adapter for testing:
            <code>
            // configure for capturing
            CapturingLoggerFactoryAdapter adapter = new CapturingLoggerFactoryAdapter();
            LogManager.Adapter = adapter;
            
            // reset capture state
            adapter.Clear();
            // log something
            ILog log = LogManager.GetCurrentClassLogger();
            log.DebugFormat("Current Time:{0}", DateTime.Now);
            
            // check logged data
            Assert.AreEqual(1, adapter.LoggerEvents.Count);
            Assert.AreEqual(LogLevel.Debug, adapter.LastEvent.Level);
            </code>
            </example>
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Common.Logging.ILoggerFactoryAdapter">
            <summary>
            LoggerFactoryAdapter interface is used internally by LogManager
            Only developers wishing to write new Common.Logging adapters need to
            worry about this interface.
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type.
            </summary>
            <param name="type">The type to use for the logger</param>
            <returns></returns>
        </member>
        <member name="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a ILog instance by name.
            </summary>
            <param name="name">The name of the logger</param>
            <returns></returns>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.Clear">
            <summary>
            Clears all captured events
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.ClearLastEvent">
            <summary>
            Resets the <see cref="P:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LastEvent"/> to <c>null</c>.
            </summary>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LoggerEvents">
            <summary>
            Holds the list of logged events.
            </summary>
            <remarks>
            To access this collection in a multithreaded application, put a lock on the list instance.
            </remarks>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)">
            <summary>
            <see cref="T:Common.Logging.Simple.CapturingLogger"/> instances send their captured log events to this method.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a <see cref="T:Common.Logging.Simple.CapturingLogger"/> instance for the given type.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a <see cref="T:Common.Logging.Simple.CapturingLogger"/> instance for the given name.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LastEvent">
            <summary>
            Holds the last log event received from any of this adapter's loggers.
            </summary>
        </member>
        <member name="T:NMemcached.Client.ConnectionType">
            <summary>
            Defines the available memcached communication protocols
            </summary>
        </member>
        <member name="F:NMemcached.Client.ConnectionType.Text">
            <summary>
            The memcached text protocol
            </summary>
        </member>
        <member name="F:NMemcached.Client.ConnectionType.Binary">
            <summary>
            The memcached binary protocol
            </summary>
            <remarks>
            <para>Available only to servers running memcached 1.3 or later</para>
            </remarks>
        </member>
        <member name="T:NMemcached.Client.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_BadOpaque">
            <summary>
              Looks up a localized string similar to Server response did not contian the correct opaque value.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_BadTextResponse">
            <summary>
              Looks up a localized string similar to The detail entry did not have the correct number of response values.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_ConfigSectionNotFound">
            <summary>
              Looks up a localized string similar to The section &quot;NMemcached.Client&quot; could not be found.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_InvalidPort">
            <summary>
              Looks up a localized string similar to TCP/UDP port values must be between 1 and 65,535.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_InvalidResponseCode">
            <summary>
              Looks up a localized string similar to Invalid response identifier.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_InvalidTextCommand">
            <summary>
              Looks up a localized string similar to Unrecognized command.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_InvalidTransport">
            <summary>
              Looks up a localized string similar to Invalid transport type &quot;All&quot;.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_NoServers">
            <summary>
              Looks up a localized string similar to The server collection must contain at least one server connection.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.error_NullKey">
            <summary>
              Looks up a localized string similar to Cache keys cannot be null.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.log_CommandPattern">
            <summary>
              Looks up a localized string similar to Operation: {0}, Key: {1}, Result: {2}.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.log_CreateConnectionProvider">
            <summary>
              Looks up a localized string similar to Creating connection provider for {0} servers with {1} hash algorithm.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.log_ErrorClosingConnection">
            <summary>
              Looks up a localized string similar to Error closing a server connection. Error: {0}.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.log_Flush">
            <summary>
              Looks up a localized string similar to Flush all called.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.log_IndexedServerCount">
            <summary>
              Looks up a localized string similar to {0} available servers indexed.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.log_ReinstatedServerCount">
            <summary>
              Looks up a localized string similar to {0} servers reinstated.
            </summary>
        </member>
        <member name="P:NMemcached.Client.Properties.Resources.runtime_CacheObjectName">
            <summary>
              Looks up a localized string similar to MemcachedObjectCache.
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:Common.Logging.ILog"/> instances that write data to <see cref="P:System.Console.Out"/>.
            </summary>
            <seealso cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter"/>
            <seealso cref="P:Common.Logging.LogManager.Adapter"/>
            <seealso cref="T:Common.Logging.ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter">
            <summary>
            Base factory implementation for creating simple <see cref="T:Common.Logging.ILog"/> instances.
            </summary>
            <remarks>Default settings are LogLevel.All, showDateTime = true, showLogName = true, and no DateTimeFormat.
            The keys in the NameValueCollection to configure this adapter are the following
            <list type="bullet">
                <item>level</item>
                <item>showDateTime</item>
                <item>showLogName</item>
                <item>dateTimeFormat</item>
            </list>
            </remarks>
            <seealso cref="P:Common.Logging.LogManager.Adapter"/>
            <seealso cref="T:Common.Logging.ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter">
            <summary>
            An implementation of <see cref="T:Common.Logging.ILoggerFactoryAdapter"/> that caches loggers handed out by this factory.
            </summary>
            <remarks>
            Implementors just need to override <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.#ctor(System.Boolean)">
            <summary>
            Creates a new 
            </summary>
            <param name="caseSensitiveLoggerCache"></param>
        </member>
        <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <summary>
            Purges all loggers from cache
            </summary>
        </member>
        <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)">
            <summary>
            Create the specified named logger instance
            </summary>
            <remarks>
            Derived factories need to implement this method to create the
            actual logger instance.
            </remarks>
        </member>
        <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Usually the <see cref="T:System.Type"/> of the current class.</param>
            <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </returns>
        </member>
        <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a ILog instance by name.
            </summary>
            <param name="name">Usually a <see cref="T:System.Type"/>'s Name or FullName property.</param>
            <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </returns>
        </member>
        <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLoggerInternal(System.String)">
            <summary>
            Get or create a ILog instance by name.
            </summary>
            <param name="name">Usually a <see cref="T:System.Type"/>'s Name or FullName property.</param>
            <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </returns>
        </member>
        <member name="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties"/> for use when the GetLogger methods are called.
            <see cref="T:Common.Logging.ConfigurationSectionHandler"/> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String)">
            <summary>
            Create the specified logger instance
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Derived factories need to implement this method to create the
            actual logger instance.
            </summary>
            <returns>a new logger instance. Must never be <c>null</c>!</returns>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Level">
            <summary>
            The default <see cref="T:Common.Logging.LogLevel"/> to use when creating new <see cref="T:Common.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLevel">
            <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowDateTime">
            <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLogName">
            <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.DateTimeFormat">
            <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter"/> class using default 
            settings.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties"/> for use when the GetLogger methods are called.
            <see cref="T:Common.Logging.ConfigurationSectionHandler"/> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Common.Logging.Simple.ConsoleOutLogger"/> instance.
            </summary>
        </member>
        <member name="T:NMemcached.Client.BinarySerializer">
            <summary>
            Serializes and deserializes byte sequences using the BinaryFormatter
            </summary>
        </member>
        <member name="M:NMemcached.Client.BinarySerializer.#ctor">
            <summary>
            Initializes a new instance of the BinarySerializer
            </summary>
        </member>
        <member name="M:NMemcached.Client.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes an object into a sequence of bytes using the BinaryFormatter
            </summary>
            <param name="data">The data to serialize</param>
            <returns>The serialized object as a sequence of bytes</returns>
        </member>
        <member name="M:NMemcached.Client.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes a sequence of bytes into a collection of objects using the BinaryFormatter
            </summary>
            <param name="data">The sequence of bytes to deserialize</param>
            <returns>A collection of objects deserialized from the sequence of bytes</returns>
        </member>
        <member name="T:NMemcached.Client.Activities.NamespaceDoc">
            <summary>
            Contains activity classes for use within Windows Workflow Foundation (WF) workflows.
            </summary>
        </member>
        <member name="T:Common.Logging.LogManager">
            <summary>
            Use the LogManager's <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/> or <see cref="M:Common.Logging.LogManager.GetLogger(System.Type)"/> 
            methods to obtain <see cref="T:Common.Logging.ILog"/> instances for logging.
            </summary>
            <remarks>
            For configuring the underlying log system using application configuration, see the example 
            at <see cref="T:Common.Logging.ConfigurationSectionHandler"/>. 
            For configuring programmatically, see the example section below.
            </remarks>
            <example>
            The example below shows the typical use of LogManager to obtain a reference to a logger
            and log an exception:
            <code>
            
            ILog log = LogManager.GetLogger(this.GetType());
            ...
            try 
            { 
              /* .... */ 
            }
            catch(Exception ex)
            {
              log.ErrorFormat("Hi {0}", ex, "dude");
            }
            
            </code>
            The example below shows programmatic configuration of the underlying log system:
            <code>
            
            // create properties
            NameValueCollection properties = new NameValueCollection();
            properties["showDateTime"] = "true";
            
            // set Adapter
            Common.Logging.LogManager.Adapter = new 
            Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter(properties);
            
            </code>
            </example>
            <seealso cref="T:Common.Logging.ILog"/>
            <seealso cref="P:Common.Logging.LogManager.Adapter"/>
            <seealso cref="T:Common.Logging.ILoggerFactoryAdapter"/>
            <seealso cref="T:Common.Logging.ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
        </member>
        <member name="F:Common.Logging.LogManager.COMMON_LOGGING_SECTION">
            <summary>
            The name of the default configuration section to read settings from.
            </summary>
            <remarks>
            You can always change the source of your configuration settings by setting another <see cref="T:Common.Logging.IConfigurationReader"/> instance
            on <see cref="P:Common.Logging.LogManager.ConfigurationReader"/>.
            </remarks>
        </member>
        <member name="M:Common.Logging.LogManager.#cctor">
            <summary>
            Performs static 1-time init of LogManager by calling <see cref="M:Common.Logging.LogManager.Reset"/>
            </summary>
        </member>
        <member name="M:Common.Logging.LogManager.Reset">
            <summary>
            Reset the <see cref="N:Common.Logging"/> infrastructure to its default settings. This means, that configuration settings
            will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
            </summary>
            <remarks>
            This is mainly used for unit testing, you wouldn't normally use this in your applications.<br/>
            <b>Note:</b><see cref="T:Common.Logging.ILog"/> instances already handed out from this LogManager are not(!) affected. 
            Resetting LogManager only affects new instances being handed out.
            </remarks>
        </member>
        <member name="M:Common.Logging.LogManager.Reset(Common.Logging.IConfigurationReader)">
            <summary>
            Reset the <see cref="N:Common.Logging"/> infrastructure to its default settings. This means, that configuration settings
            will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
            </summary>
            <remarks>
            This is mainly used for unit testing, you wouldn't normally use this in your applications.<br/>
            <b>Note:</b><see cref="T:Common.Logging.ILog"/> instances already handed out from this LogManager are not(!) affected. 
            Resetting LogManager only affects new instances being handed out.
            </remarks>
            <param name="reader">
            the <see cref="T:Common.Logging.IConfigurationReader"/> instance to obtain settings for 
            re-initializing the LogManager.
            </param>
        </member>
        <member name="M:Common.Logging.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)"/>
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter"/> using the type of the calling class.
            </summary>
            <remarks>
            This method needs to inspect the <see cref="T:System.Diagnostics.StackTrace"/> in order to determine the calling 
            class. This of course comes with a performance penalty, thus you shouldn't call it too
            often in your application.
            </remarks>
            <seealso cref="M:Common.Logging.LogManager.GetLogger(System.Type)"/>
            <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter"/></returns>
        </member>
        <member name="M:Common.Logging.LogManager.GetLogger``1">
            <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)"/>
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter"/> using the specified type.
            </summary>
            <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter"/></returns>
        </member>
        <member name="M:Common.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)"/>
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter"/> using the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter"/></returns>
        </member>
        <member name="M:Common.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)"/>
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter"/> using the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter"/></returns>
        </member>
        <member name="M:Common.Logging.LogManager.BuildLoggerFactoryAdapter">
            <summary>
            Builds the logger factory adapter.
            </summary>
            <returns>a factory adapter instance. Is never <c>null</c>.</returns>
        </member>
        <member name="M:Common.Logging.LogManager.BuildLoggerFactoryAdapterFromLogSettings(Common.Logging.Configuration.LogSetting)">
            <summary>
            Builds a <see cref="T:Common.Logging.ILoggerFactoryAdapter"/> instance from the given <see cref="T:Common.Logging.Configuration.LogSetting"/>
            using <see cref="T:System.Activator"/>.
            </summary>
            <param name="setting"></param>
            <returns>the <see cref="T:Common.Logging.ILoggerFactoryAdapter"/> instance. Is never <c>null</c></returns>
        </member>
        <member name="P:Common.Logging.LogManager.ConfigurationReader">
            <summary>
            Gets the configuration reader used to initialize the LogManager.
            </summary>
            <remarks>Primarily used for testing purposes but maybe useful to obtain configuration
            information from some place other than the .NET application configuration file.</remarks>
            <value>The configuration reader.</value>
        </member>
        <member name="P:Common.Logging.LogManager.Adapter">
            <summary>
            Gets or sets the adapter.
            </summary>
            <value>The adapter.</value>
        </member>
        <member name="T:Common.Logging.ConfigurationException">
            <summary>
            The exception that is thrown when a configuration system error has occurred with Common.Logging
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Common.Logging.ConfigurationException.#ctor">
            <summary>Creates a new instance of the ObjectsException class.</summary>
        </member>
        <member name="M:Common.Logging.ConfigurationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ConfigurationException class. with the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Common.Logging.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ConfigurationException class with the specified message
            and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Common.Logging.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ConfigurationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:NMemcached.Client.DeflateCompressor">
            <summary>
            Compresses and decompresses byte arrays using the Deflate algorithm
            </summary>
        </member>
        <member name="T:NMemcached.Client.ICompressor">
            <summary>
            Defines methods required to compress and decompress data
            </summary>
        </member>
        <member name="M:NMemcached.Client.ICompressor.Compress(System.Byte[])">
            <summary>
            Compresses a sequence of bytes
            </summary>
            <param name="data">The sequence of bytes to be compressed</param>
            <returns>The compressed sequence of bytes</returns>
        </member>
        <member name="M:NMemcached.Client.ICompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses a sequence of bytes
            </summary>
            <param name="data">The sequence of bytes to be decompressed</param>
            <returns>The decompressed sequence of bytes</returns>
        </member>
        <member name="M:NMemcached.Client.DeflateCompressor.#ctor">
            <summary>
            Initializes a new instance of the DeflateCompressor class
            </summary>
        </member>
        <member name="M:NMemcached.Client.DeflateCompressor.Compress(System.Byte[])">
            <summary>
            Compresses a sequence of bytes using the Deflate algorithm
            </summary>
            <param name="data">The sequence of bytes to compress</param>
            <returns>The compressed sequence of bytes</returns>
        </member>
        <member name="M:NMemcached.Client.DeflateCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses a sequence of bytes using the Deflate algorithm
            </summary>
            <param name="data">The sequence of bytes to decompress</param>
            <returns>The decompressed sequence of bytes</returns>
        </member>
        <member name="T:NMemcached.Client.Activities.GetActivity">
            <summary>
            Reads an item from the cache
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetActivity.#ctor">
            <summary>
            Initializes a new instance of the GetActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.GetActivity.Result">
            <summary>
            Get or sets the value read from the cache
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.TraceLogger">
            <summary>
            Logger sending everything to the trace output stream using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <remarks>
            Beware not to use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener"/> in combination with this logger as 
            this would result in an endless loop for obvious reasons!
            </remarks>
            <seealso cref="P:Common.Logging.LogManager.Adapter"/>
            <seealso cref="T:Common.Logging.ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.Simple.TraceLogger.#ctor(System.Boolean,System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new TraceLogger instance.
            </summary>
            <param name="useTraceSource">whether to use <see cref="T:System.Diagnostics.TraceSource"/> or <see cref="T:System.Diagnostics.Trace"/> for logging.</param>
            <param name="logName">the name of this logger</param>
            <param name="logLevel">the default log level to use</param>
            <param name="showLevel">Include the current log level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:Common.Logging.Simple.TraceLogger.IsLevelEnabled(Common.Logging.LogLevel)">
            <summary>
            Determines if the given log level is currently enabled.
            checks <see cref="P:System.Diagnostics.TraceSource.Switch"/> if <see cref="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.UseTraceSource"/> is true.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.TraceLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.TraceLogger.OnDeserialization(System.Object)">
            <summary>
            Called after deserialization completed.
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.TraceLogger.FormatOutputMessage">
            <summary>
            Used to defer message formatting until it is really needed.
            </summary>
            <remarks>
            This class also improves performance when multiple 
            <see cref="T:System.Diagnostics.TraceListener"/>s are configured.
            </remarks>
        </member>
        <member name="T:Common.Logging.ConfigurationSectionHandler">
            <summary>
            Used in an application's configuration file (App.Config or Web.Config) to configure the logging subsystem.
            </summary>
            <example>
            An example configuration section that writes log messages to the Console using the
            built-in Console Logger.
            <code lang="XML">
            &lt;configuration&gt;
                &lt;configSections&gt;
                  &lt;sectionGroup name=&quot;common&quot;&gt;
                    &lt;section name=&quot;logging&quot; type=&quot;Common.Logging.ConfigurationSectionHandler, Common.Logging&quot; /&gt;
                  &lt;/sectionGroup&gt; 
                &lt;/configSections&gt;
                &lt;common&gt;
                  &lt;logging&gt;
                    &lt;factoryAdapter type=&quot;Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter, Common.Logging&quot;&gt;
                      &lt;arg key=&quot;showLogName&quot; value=&quot;true&quot; /&gt;
                      &lt;arg key=&quot;showDataTime&quot; value=&quot;true&quot; /&gt;
                      &lt;arg key=&quot;level&quot; value=&quot;ALL&quot; /&gt;
                      &lt;arg key=&quot;dateTimeFormat&quot; value=&quot;yyyy/MM/dd HH:mm:ss:fff&quot; /&gt;
                    &lt;/factoryAdapter&gt;
                  &lt;/logging&gt;
                &lt;/common&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:Common.Logging.ConfigurationSectionHandler.#cctor">
            <summary>
            Ensure static fields get initialized before any class member 
            can be accessed (avoids beforeFieldInit)
            </summary>
        </member>
        <member name="M:Common.Logging.ConfigurationSectionHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Common.Logging.ConfigurationSectionHandler.ReadConfiguration(System.Xml.XmlNode)">
            <summary>
            Retrieves the <see cref="T:System.Type"/> of the logger the use by looking at the logFactoryAdapter element
            of the logging configuration element.
            </summary>
            <param name="section"></param>
            <returns>
            A <see cref="T:Common.Logging.Configuration.LogSetting"/> object containing the specified type that implements 
            <see cref="T:Common.Logging.ILoggerFactoryAdapter"/> along with zero or more properties that will be 
            passed to the logger factory adapter's constructor as an <see cref="T:System.Collections.IDictionary"/>.
            </returns>
        </member>
        <member name="M:Common.Logging.ConfigurationSectionHandler.Create(Common.Logging.Configuration.LogSetting,System.Object,System.Xml.XmlNode)">
            <summary>
            Verifies that the logFactoryAdapter element appears once in the configuration section.
            </summary>
            <param name="parent">settings of a parent section - atm this must always be null</param>
            <param name="configContext">Additional information about the configuration process.</param>
            <param name="section">The configuration section to apply an XPath query too.</param>
            <returns>
            A <see cref="T:Common.Logging.Configuration.LogSetting"/> object containing the specified logFactoryAdapter type
            along with user supplied configuration properties.
            </returns>
        </member>
        <member name="M:Common.Logging.ConfigurationSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Verifies that the logFactoryAdapter element appears once in the configuration section.
            </summary>
            <param name="parent">The parent of the current item.</param>
            <param name="configContext">Additional information about the configuration process.</param>
            <param name="section">The configuration section to apply an XPath query too.</param>
            <returns>
            A <see cref="T:Common.Logging.Configuration.LogSetting"/> object containing the specified logFactoryAdapter type
            along with user supplied configuration properties.
            </returns>
        </member>
        <member name="T:NMemcached.Client.NamespaceDoc">
            <summary>
            Contains the classes necessary to communicate with one or more Memcached servers.
            </summary>
        </member>
        <member name="T:Common.Logging.Configuration.NamespaceDoc">
            <summary>
            This namespace contains various utility classes.
            </summary>
        </member>
        <member name="T:Common.Logging.Configuration.ArgUtils">
            <summary>
            Various utility methods for using during factory and logger instance configuration
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.#cctor">
            <summary>
            Initialize all members before any of this class' methods can be accessed (avoids beforeFieldInit)
            </summary>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.RegisterTypeParser``1(Common.Logging.Configuration.ArgUtils.ParseHandler{``0})">
            <summary>
            Adds the parser to the list of known type parsers.
            </summary>
            <remarks>
            .NET intrinsic types are pre-registerd: short, int, long, float, double, decimal, bool
            </remarks>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="values">may be null</param>
            <param name="name">the value's key</param>
            <returns>if <paramref name="values"/> is not null, the value returned by values[name]. <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="values">may be null</param>
            <param name="name">the value's key</param>
            <param name="defaultValue">the default value, if not found</param>
            <returns>if <paramref name="values"/> is not null, the value returned by values[name]. <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.Coalesce(System.String[])">
            <summary>
            Returns the first nonnull, nonempty value among its arguments.
            </summary>
            <remarks>
            Returns <c>null</c>, if the initial list was null or empty.
            </remarks>
            <seealso cref="M:Common.Logging.Configuration.ArgUtils.Coalesce``1(System.Predicate{``0},``0[])"/>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.Coalesce``1(System.Predicate{``0},``0[])">
            <summary>
            Returns the first nonnull, nonempty value among its arguments.
            </summary>
            <remarks>
            Also 
            </remarks>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.TryParseEnum``1(``0,System.String)">
            <summary>
            Tries parsing <paramref name="stringValue"/> into an enum of the type of <paramref name="defaultValue"/>.
            </summary>
            <param name="defaultValue">the default value to return if parsing fails</param>
            <param name="stringValue">the string value to parse</param>
            <returns>the successfully parsed value, <paramref name="defaultValue"/> otherwise.</returns>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.TryParse``1(``0,System.String)">
            <summary>
            Tries parsing <paramref name="stringValue"/> into the specified return type.
            </summary>
            <param name="defaultValue">the default value to return if parsing fails</param>
            <param name="stringValue">the string value to parse</param>
            <returns>the successfully parsed value, <paramref name="defaultValue"/> otherwise.</returns>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.AssertNotNull``1(System.String,``0)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if <paramref name="val"/> is <c>null</c>.
            </summary>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.AssertNotNull``1(System.String,``0,System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if <paramref name="val"/> is <c>null</c>.
            </summary>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.AssertIsAssignable``1(System.String,System.Type)">
            <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException"/> if an object of type <paramref name="valType"/> is not
            assignable to type <typeparam name="T"></typeparam>.
            </summary>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.AssertIsAssignable``1(System.String,System.Type,System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException"/> if an object of type <paramref name="valType"/> is not
            assignable to type <typeparam name="T"></typeparam>.
            </summary>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.Guard(Common.Logging.Configuration.ArgUtils.Action,System.String,System.Object[])">
            <summary>
            Ensures any exception thrown by the given <paramref name="action"/> is wrapped with an
            <see cref="T:Common.Logging.ConfigurationException"/>. 
            </summary>
            <remarks>
            If <paramref name="action"/> already throws a ConfigurationException, it will not be wrapped.
            </remarks>
            <param name="action">the action to execute</param>
            <param name="messageFormat">the message to be set on the thrown <see cref="T:Common.Logging.ConfigurationException"/></param>
            <param name="args">args to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/> to format the message</param>
        </member>
        <member name="M:Common.Logging.Configuration.ArgUtils.Guard``1(Common.Logging.Configuration.ArgUtils.Function{``0},System.String,System.Object[])">
            <summary>
            Ensures any exception thrown by the given <paramref name="function"/> is wrapped with an
            <see cref="T:Common.Logging.ConfigurationException"/>. 
            </summary>
            <remarks>
            If <paramref name="function"/> already throws a ConfigurationException, it will not be wrapped.
            </remarks>
            <param name="function">the action to execute</param>
            <param name="messageFormat">the message to be set on the thrown <see cref="T:Common.Logging.ConfigurationException"/></param>
            <param name="args">args to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/> to format the message</param>
        </member>
        <member name="T:Common.Logging.Configuration.ArgUtils.ParseHandler`1">
            <summary>
            A delegate converting a string representation into the target type
            </summary>
        </member>
        <member name="T:Common.Logging.Configuration.ArgUtils.Action">
            <summary>
            An anonymous action delegate with no arguments and no return value.
            </summary>
            <seealso cref="M:Common.Logging.Configuration.ArgUtils.Guard(Common.Logging.Configuration.ArgUtils.Action,System.String,System.Object[])"/>
        </member>
        <member name="T:Common.Logging.Configuration.ArgUtils.Function`1">
            <summary>
            An anonymous action delegate with no arguments and no return value.
            </summary>
            <seealso cref="M:Common.Logging.Configuration.ArgUtils.Guard``1(Common.Logging.Configuration.ArgUtils.Function{``0},System.String,System.Object[])"/>
        </member>
        <member name="T:NMemcached.Client.Binary.PacketType">
            <summary>
            Defines the possible packet types
            </summary>
        </member>
        <member name="F:NMemcached.Client.Binary.PacketType.Request">
            <summary>
            A request packet
            </summary>
        </member>
        <member name="F:NMemcached.Client.Binary.PacketType.Response">
            <summary>
            A response packet
            </summary>
        </member>
        <member name="T:NMemcached.Client.Binary.DataTypeCode">
            <summary>
            Defines possible data types for a request or response packet
            </summary>
        </member>
        <member name="F:NMemcached.Client.Binary.DataTypeCode.Raw">
            <summary>
            Raw bytes
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryPacket.#ctor">
            <summary>
            Initializes a new instance of the BinaryPacket class
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Type">
            <summary>
            When overridden in a derived class, gets the packet type 
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Operation">
            <summary>
            Gets or sets the operation code for the packet
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.DataType">
            <summary>
            Gets or sets the data type of the packet content
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Opaque">
            <summary>
            Gets or sets the opaqe value sent to the server with the request
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Cas">
            <summary>
            Gets or sets the CAS value for check and set operations
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Key">
            <summary>
            Gets or sets the key of the packet
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Extras">
            <summary>
            Gets or sets the extras for the packet
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.Value">
            <summary>
            Gets or sets the value of the packet
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.KeyLength">
            <summary>
            Gets the length of the key of the packet
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.ExtrasLength">
            <summary>
            Gets the length of the extras for the packet
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryPacket.TotalBodyLength">
            <summary>
            Gets the total length as a total of the key, extras, and content lengths
            </summary>
        </member>
        <member name="T:NMemcached.Client.Text.TextStream">
            <summary>
            A memory stream used for reading memcached text responses
            </summary>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
            <param name="buffer">An array of unsigned bytes from which to create the stream</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
            <param name="capacity">The initial size of the internal array in bytes</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
            <param name="buffer">An array of unsigned bytes from which to create the stream</param>
            <param name="writable">Determines whether the stream supports writing</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
            <param name="buffer">An array of unsigned bytes from which to create the stream</param>
            <param name="index">The index into buffer at which the stream begins</param>
            <param name="count">The length of the stream in bytes</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
            <param name="buffer">An array of unsigned bytes from which to create the stream</param>
            <param name="index">The index into buffer at which the stream begins</param>
            <param name="count">The length of the stream in bytes</param>
            <param name="writable">Determines whether the stream supports writing</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TextStream class
            </summary>
            <param name="buffer">An array of unsigned bytes from which to create the stream</param>
            <param name="index">The index into buffer at which the stream begins</param>
            <param name="count">The length of the stream in bytes</param>
            <param name="writable">Determines whether the stream supports writing</param>
            <param name="publiclyVisible">True to enable GetBuffer(), which returns the byte array from which the stream was created; otherwise, false</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.ClearEndOfLine">
            <summary>
            Advances the stream pointer beyond the next end of line marker.
            </summary>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.Read(System.Byte[])">
            <summary>
            Reads a block of bytes from the current stream and writes the data to a buffer
            </summary>
            <param name="buffer">The buffer to which the data is written</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.ReadLine">
            <summary>
            Reads all data up to the next end of line.
            </summary>
            <returns>All data from the stream up to the next end of line.</returns>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.ReadLine(System.Text.Encoding)">
            <summary>
            Reads all data up to the next end of line
            </summary>
            <param name="encoding">The encoding of the text data</param>
            <returns>All data from the stream up to the next end of line</returns>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.ReadLineAsBytes">
            <summary>
            Reads all data up to the next end of line as bytes
            </summary>
            <returns>All data up to the next end of line as bytes</returns>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.Write(System.Byte[])">
            <summary>
            Writes the contents of a buffer to the stream
            </summary>
            <param name="buffer">The data to be written to the stream</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.Write(System.String)">
            <summary>
            Writes a string to the stream
            </summary>
            <param name="data">The string to write to the stream</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes a string to the stream
            </summary>
            <param name="data">The string to write to the stream</param>
            <param name="encoding">The encoding of the string to write</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.WriteLine(System.String)">
            <summary>
            Writes a string to the stream and terminates it with a new line
            </summary>
            <param name="data">The string to write to the stream</param>
        </member>
        <member name="M:NMemcached.Client.Text.TextStream.WriteLine(System.String,System.Text.Encoding)">
            <summary>
            Writes a string to the stream and terminates it with a new line
            </summary>
            <param name="data">The string to write to the stream</param>
            <param name="encoding">The encoding of the string to write</param>
        </member>
        <member name="P:NMemcached.Client.Text.TextStream.Encoding">
            <summary>
            Gets or sets the encoding for the stream
            </summary>
        </member>
        <member name="P:NMemcached.Client.Text.TextStream.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.NoOpLogger">
            <summary>
            Silently ignores all log messages.
            </summary>
            <author>Gilles Bayon</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="P:Common.Logging.Simple.NoOpLogger.IsTraceEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.NoOpLogger.IsDebugEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.NoOpLogger.IsInfoEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.NoOpLogger.IsWarnEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.NoOpLogger.IsErrorEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.NoOpLogger.IsFatalEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="T:Common.Logging.Configuration.DefaultConfigurationReader">
            <summary>
            Implementation of <see cref="T:Common.Logging.IConfigurationReader"/> that uses the standard .NET 
            configuration APIs, ConfigurationSettings in 1.x and ConfigurationManager in 2.0
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Common.Logging.IConfigurationReader">
            <summary>
            Interface for basic operations to read .NET application configuration information.
            </summary>
            <remarks>Provides a simple abstraction to handle BCL API differences between .NET 1.x and 2.0. Also
            useful for testing scenarios.</remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Common.Logging.IConfigurationReader.GetSection(System.String)">
            <summary>
            Parses the configuration section and returns the resulting object.
            </summary>
            <remarks>
            <p>
            Primary purpose of this method is to allow us to parse and 
            load configuration sections using the same API regardless
            of the .NET framework version.
            </p>
            </remarks>
            <param name="sectionName">Name of the configuration section.</param>
            <returns>Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler"/>.</returns>
            <see cref="T:Common.Logging.ConfigurationSectionHandler"/>
        </member>
        <member name="M:Common.Logging.Configuration.DefaultConfigurationReader.GetSection(System.String)">
            <summary>
            Parses the configuration section and returns the resulting object.
            </summary>
            <param name="sectionName">Name of the configuration section.</param>
            <returns>
            Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler"/>.
            </returns>
            <remarks>
            	<p>
            Primary purpose of this method is to allow us to parse and
            load configuration sections using the same API regardless
            of the .NET framework version.
            </p>
            </remarks>
            <see cref="T:Common.Logging.ConfigurationSectionHandler"/>
        </member>
        <member name="T:NMemcached.Client.Activities.IncrementDecrementActivity">
            <summary>
            Increments or decrements a cached value
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.IncrementDecrementActivity.#ctor">
            <summary>
            Initializes a new instance of the IncrementDecrementActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.IncrementDecrementActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.IncrementDecrementActivity.IsIncrement">
            <summary>
            Gets or sets a value indicating if the increment or decrement command is sent
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.IncrementDecrementActivity.Count">
            <summary>
            Gets or sets the value by which the cache item is incremented or decremented
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.IncrementDecrementActivity.Result">
            <summary>
            Gets or sets the cache value after the increment or decrement operation
            </summary>
        </member>
        <member name="T:NMemcached.Client.StorageFlags">
            <summary>
            Defines values saved with cache entries that require special processing
            </summary>
        </member>
        <member name="F:NMemcached.Client.StorageFlags.None">
            <summary>
            No special processing
            </summary>
        </member>
        <member name="F:NMemcached.Client.StorageFlags.Serialized">
            <summary>
            Specifies that the content of the entry is serialized
            </summary>
        </member>
        <member name="F:NMemcached.Client.StorageFlags.Compressed">
            <summary>
            Specifies that the content of the entry is compressed
            </summary>
        </member>
        <member name="T:NMemcached.Client.MemcachedClient">
            <summary>
            A Memcached connection that communicates with multiple memcached servers
            </summary>
            <remarks>
            <para>The methods in this class do not make any assumptions about the server connection implementations. Each method inherited from the MemcachedConnection class are implemented in a way that calls the corresponding method in the underlying server connections.</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the MemcachedClient class
            </summary>
            <param name="servers">A collection of server names without port number</param>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the MemcachedClient class
            </summary>
            <param name="servers">A collection of server names without port number</param>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.#ctor(NMemcached.Client.IConnectionProvider)">
            <summary>
            Initializes a new instance of the MemcachedClient class
            </summary>
            <param name="connectionProvider">The IConnectionProvider used by the client to get server connections</param>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Adds a key/value pair to a Memcached server if the data does not already exist.
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Append(System.String,System.Object)">
            <summary>
            Adds data to an existing cache entry after the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.CheckAndSet(System.String,System.Object,System.DateTime,System.UInt64)">
            <summary>
            Stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="casUnique">The unique value of an an existing entry</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Close">
            <summary>
            Closes all connections to Memcached servers
            </summary>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Create">
            <summary>
            Creates a new MemcachedClient from the application configuration
            </summary>
            <returns>A new MemcachedClient defined by the application configuration</returns>
            <remarks>
            <para>A MemcachedClient instance can be created using settings read from the applicaiton or web configuration file. The built-in configuration uses the included connection provider and does not have the ability to use custom connection providers.</para>
            <para>Example:</para>
            <code>
            &lt;configSections&gt;
                &lt;section name="nmemcached.client" type="NMemcached.Client.Configuration.NMemcachedConfigurationSection, NMemcached.Client" /&gt;
            &lt;/configSections&gt;
            &lt;nmemcached.client xmlns="http://memcached.protectedvoid.com/2011/06/configuration"&gt;
                &lt;connectionProvider&gt;
                    &lt;add server="localhost" compressionAlgorithm="Deflate" /&gt;
                    &lt;add server="someRemoteServer" port="15455" compressionAlgorithm="GZip" /&gt;
                &lt;/connectionProvider&gt;
            &lt;/nmemcached.client&gt;
            </code>
            <para>Note: An XSD is in the source tree and included with the binary distributions for intellisense.</para>
            <para>The ConnectionProvider element has an optional "hashAlgorithm" attribute that specifies the algorithm to use for they consistent hashing algorithm. The possible values are:</para>
            <list type="bullet">
                <item>
                    <term>fnv32</term>
                    <description>The FNV algorithm that produces a 32 bit hash value</description>
                </item>
                <item>
                    <term>fnv1a32 (default)</term>
                    <description>The FNV1a algorithm that produces a 32 bit hash value</description>
                </item>
                <item>
                    <term>fnv64</term>
                    <description>The FNV algorithm that produces a 64 bit hash value</description>
                </item>
                <item>
                    <term>fnv1a64</term>
                    <description>The FNV1a algorithm that produces a 64 bit hash value</description>
                </item>
                <item>
                    <term>md5</term>
                    <description>The MD5 algorithm that produces a 128 bit hash value</description>
                </item>
                <item>
                    <term>sha1</term>
                    <description>The SHA1 algorithm that produces a 160 bit hash value</description>
                </item>
                <item>
                    <term>sha256</term>
                    <description>The SHA1 algorithm that produces a 256 bit hash value</description>
                </item>
                <item>
                    <term>sha384</term>
                    <description>The SHA1 algorithm that produces a 384 bit hash value</description>
                </item>
                <item>
                    <term>sha512</term>
                    <description>The SHA1 algorithm that produces a 512 bit hash value</description>
                </item>
            </list>
            <para>Each "add" child element of "connectionProvider" represents a single Memcached server. The only required attribute is the "server" attribute that must contian the host name ir IP address of the destination. Any combination of optional attributes can be provided to configure individual server connections:</para>
            <list type="bullet">
                <item>
                    <term>port</term>
                    <description>A valid TCP/UDP port number. (default: "11211")</description>
                </item>
                <item>
                    <term>protocol</term>
                    <description>The Memcached communication protocol. Valid values are "text" and "binary". (default: "text")</description>
                </item>
                <item>
                    <term>transport</term>
                    <description>The transport protocol for the connection. Valid values are "tcp", "udp", "connectionOriented", "connectionless". (default: "tcp")</description>
                </item>
                <item>
                    <term>useCompression</term>
                    <description>Determines if data compression is used for items sent to the cache. (default: "false")</description>
                </item>
                <item>
                    <term>compressionAlgorithm</term>
                    <description>The algorithm to use for data compression if "useCompression" is set to "true". Valid values are "GZip" and "Deflate". (default: "GZip")</description>
                </item>
                <item>
                    <term>paylodEncoding</term>
                    <description>The character encoding of the data sent to the cache. Value values are "ASCII", "BigEndianUnicode", "Unicode", "UTF32", "UTF7", and "UTF8". (default: "UTF8")</description>
                </item>
                <item>
                    <term>protocolEncoding</term>
                    <description>The character encoding of the memcached protocol. Valid values are the same as the payloadEncoding attribute. (default: "UTF8")</description>
                </item>
                <item>
                    <term>sendTimeout</term>
                    <description>The number of milliseconds to wait to send data before throwing an exception. (default: 5000)</description>
                </item>
                <item>
                    <term>receiveTimeout</term>
                    <description>The number of milliseconds to wait to receive data before throwing an exception. (default: 5000)</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Decrement(System.String,System.UInt64)">
            <summary>
            Decreases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is decremented</param>
            <returns>The new value of the data after the decrement operation was carried out</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Delete(System.String)">
            <summary>
            Removes a cache entry
            </summary>
            <param name="key">The key of the entry to be deleted</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.FlushAll">
            <summary>
            Immediately invalidates all cached items in all servers
            </summary>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.FlushAll(System.TimeSpan)">
            <summary>
            Invalidates all cached items in all servers after the specified delay
            </summary>
            <param name="delay">The amount of time to pause prior to executing the "flush_all" command.</param>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error.</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Get(System.String)">
            <summary>
            Reads a single entry from the cache
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Get(System.String[])">
            <summary>
            Reads multiple entries from the cache
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.GetWithDetail(System.String)">
            <summary>
            Reads a single entry from the cache and returns the data with detail information
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key with detail information</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.GetWithDetail(System.String[])">
            <summary>
            Reads multiple entries from the cache with detail information
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache with detail information</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Increment(System.String,System.UInt64)">
            <summary>
            Increases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is incremented</param>
            <returns>The new value of the data after the increment operation was carried out</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Prepend(System.String,System.Object)">
            <summary>
            Adds data to an existing cache entry before the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Replace(System.String,System.Object,System.DateTime)">
            <summary>
            Replaces the data associated with an existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Set(System.String,System.Object,System.DateTime)">
            <summary>
            Adds data to the cache, overwriting any data in an existing entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Stats">
            <summary>
            Gets the statistics for each server
            </summary>
            <returns>A dictionary keyed by connection that contains the statistics for each server</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Versions">
            <summary>
            Gets the versions of each server
            </summary>
            <returns>A collection of server version numbers.</returns>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Dispose">
            <summary>
            Releases the unmanaged resources used by the MemcachedClient
            </summary>
        </member>
        <member name="M:NMemcached.Client.MemcachedClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MemcachedClient, and optionally disposes of the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources</param>
        </member>
        <member name="E:NMemcached.Client.MemcachedClient.ConnectionError">
            <summary>
            Occurs when an error occurs with a server connection
            </summary>
        </member>
        <member name="P:NMemcached.Client.MemcachedClient.ConnectionProvider">
            <summary>
            Gets the IConnectionProvider used by the client to get server connections
            </summary>
        </member>
        <member name="P:NMemcached.Client.MemcachedClient.IncludeCacheMisses">
            <summary>
            Gets or sets a value that determines if empty enties are returned for multi-get operations.
            </summary>
        </member>
        <member name="T:NamespaceDoc">
            <summary>
            <h1>Overview</h1>
            <para>
            There are a variety of logging implementations for .NET currently in use, log4net, Enterprise 
            Library Logging, NLog, to name the most popular. The downside of having differerent implementation 
            is that they do not share a common interface and therefore impose a particular logging 
            implementation on the users of your library. To solve this dependency problem the Common.Logging 
            library introduces a simple abstraction to allow you to select a specific logging implementation at 
            runtime.
            </para>
            <para>
            The library is based on work done by the developers of IBatis.NET and it's usage is inspired by 
            log4net. Many thanks to the developers of those projects!
            </para>
            <h1>Usage</h1>
            <para>
            The core logging library Common.Logging provides the base logging <see cref="T:Common.Logging.ILog"/> interface as 
            well as the global <see cref="T:Common.Logging.LogManager"/> that you use to instrument your code:
            </para>
            <code lang="C#">
            ILog log = LogManager.GetLogger(this.GetType());  
            
            log.DebugFormat("Hi {0}", "dude");
            </code>
            <para>
            To output the information logged, you need to tell Common.Logging, what underlying logging system 
            to use. Common.Logging already includes simple console and trace based logger implementations 
            usable out of the box. Adding the following configuration snippet to your app.config causes 
            Common.Logging to output all information to the console:
            </para>
            <code lang="XML">
            &lt;configuration&gt; 
                &lt;configSections&gt; 
                  &lt;sectionGroup name="common"&gt; 
                    &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt; 
                  &lt;/sectionGroup&gt;  
                &lt;/configSections&gt; 
                 
                &lt;common&gt; 
                  &lt;logging&gt; 
                    &lt;factoryAdapter type="Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter, Common.Logging"&gt; 
                      &lt;arg key="level" value="DEBUG" /&gt; 
                    &lt;/factoryAdapter&gt; 
                  &lt;/logging&gt; 
                &lt;/common&gt; 
            &lt;/configuration&gt; 
            </code>
            <h1>Customizing</h1>
            <para>
            In the case you want to integrate your own logging system that is not supported by Common.Logging yet, it is easily 
            possible to implement your own plugin by implementing <see cref="T:Common.Logging.ILoggerFactoryAdapter"/>.
            For convenience there is a base <see cref="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter"/> implementation available that usually 
            makes implementing your own adapter a breeze.
            </para>
            <h1>&lt;system.diagnostics&gt; Integration</h1>
            <para>
            If your code already uses the .NET framework's built-in <a href="http://msdn.microsoft.com/library/system.diagnostics.trace.aspx">System.Diagnostics.Trace</a>
            system, you can use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener"/> to redirect all trace output to the 
            Common.Logging infrastructure.
            </para>
            </summary>
        </member>
        <member name="T:NMemcached.Client.CacheDetail">
            <summary>
            Represents the detailed information for a cache entry
            </summary>
        </member>
        <member name="M:NMemcached.Client.CacheDetail.#ctor">
            <summary>
            Initializes a new instance of the CacheDetail class
            </summary>
        </member>
        <member name="M:NMemcached.Client.CacheDetail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CacheDetail class
            </summary>
            <param name="key">The key of the cache item</param>
        </member>
        <member name="M:NMemcached.Client.CacheDetail.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the CacheDetail class
            </summary>
            <param name="key">The key of the cache item</param>
            <param name="value">The value of the cache item</param>
        </member>
        <member name="M:NMemcached.Client.CacheDetail.#ctor(System.String,System.Object,System.UInt64)">
            <summary>
            Initializes a new instance of the CacheDetail class
            </summary>
            <param name="key">The key of the cache item</param>
            <param name="value">The value of the cache item</param>
            <param name="casUnique">The "check and set" uniqe value of the cache item</param>
        </member>
        <member name="M:NMemcached.Client.CacheDetail.#ctor(System.String,System.Object,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the CacheDetail class
            </summary>
            <param name="key">The key of the cache item</param>
            <param name="value">The value of the cache item</param>
            <param name="casUnique">The "check and set" uniqe value of the cache item</param>
            <param name="opaque">The opaqe value for the cache operation</param>
        </member>
        <member name="P:NMemcached.Client.CacheDetail.CasUnique">
            <summary>
            Gets or sets the "check and set" unique value
            </summary>
        </member>
        <member name="P:NMemcached.Client.CacheDetail.Key">
            <summary>
            Gets or sets the key for the cache item
            </summary>
        </member>
        <member name="P:NMemcached.Client.CacheDetail.Opaque">
            <summary>
            Gets or sets the opaque value for the cache operation
            </summary>
        </member>
        <member name="P:NMemcached.Client.CacheDetail.Value">
            <summary>
            Gets or sets the value of the cache item
            </summary>
        </member>
        <member name="T:NMemcached.Client.BinaryConnection">
            <summary>
            A memcached server connection using the binary protocol
            </summary>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.#ctor(System.Net.TransportType,System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the BinaryConnection class
            </summary>
            <param name="transportType">The transport protocol used by the connection</param>
            <param name="remoteEp">The end point of the memcached server</param>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.#ctor(System.Net.TransportType,System.Net.EndPoint,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryConnection class
            </summary>
            <param name="transportType">The transport protocol used by the connection</param>
            <param name="remoteEp">The end point of the memcached server</param>
            <param name="protocolEncoding">The character encoding for string data sent to and read from the server</param>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.#ctor(System.Net.TransportType,System.Net.EndPoint,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the BinaryConnection class
            </summary>
            <param name="transportType">The transport protocol used by the connection</param>
            <param name="remoteEp">The end point of the memcached server</param>
            <param name="protocolEncoding">The character encoding for string data sent to and read from the server</param>
            <param name="useCompression">Determines if non primitive data is compressed when sent to or decompressed when read from the server</param>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Adds a key/value pair to a Memcached server if the data does not already exist.
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Append(System.String,System.Object)">
            <summary>
            Adds data to an existing cache entry after the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.CheckAndSet(System.String,System.Object,System.DateTime,System.UInt64)">
            <summary>
            Stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="casUnique">The unique value of an an existing entry</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Close">
            <summary>
            Closes the connection to the Memcached server by sending the OpCode.Quit command
            </summary>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Decrement(System.String,System.UInt64)">
            <summary>
            Decreases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is decremented</param>
            <returns>The new value of the data after the decrement operation was carried out</returns>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Delete(System.String)">
            <summary>
            Removes a cache entry
            </summary>
            <param name="key">The key of the entry to be deleted</param>
            <returns>The response code of the command sent to the server</returns>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.FlushAll">
            <summary>
            Immediately invalidates all cached items in all servers
            </summary>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.FlushAll(System.TimeSpan)">
            <summary>
            Invalidates all cached items in all servers after the specified delay
            </summary>
            <param name="delay">The amount of time to pause prior to executing the "flush_all" command.</param>
            <remarks>
            <para>The "flush_all" command has no response other than OK unless there is an error.</para>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Get(System.String)">
            <summary>
            Reads a single entry from the cache
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Get(System.String[])">
            <summary>
            Reads multiple entries from the cache
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.GetWithDetail(System.String)">
            <summary>
            Reads a single entry from the cache and returns the data with detail information
            </summary>
            <param name="key">The key of the item to get from the cache</param>
            <returns>The data from the cache associated with the specified key with detail information</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.GetWithDetail(System.String[])">
            <summary>
            Reads multiple entries from the cache with detail information
            </summary>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>A keyed collection of items read from the cache with detail information</returns>
            <exception cref="T:System.ArgumentNullException">A null key was encountered</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Increment(System.String,System.UInt64)">
            <summary>
            Increases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The cache entry to increment</param>
            <param name="count">The amount by which the value is incremented</param>
            <returns>The new value of the data after the increment operation was carried out</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Prepend(System.String,System.Object)">
            <summary>
            Adds data to an existing cache entry before the existing data
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Replace(System.String,System.Object,System.DateTime)">
            <summary>
            Replaces the data associated with an existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Set(System.String,System.Object,System.DateTime)">
            <summary>
            Adds data to the cache, overwriting any data in an existing entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <returns>The response code of the command sent to the server</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Stats">
            <summary>
            Reads the cache statistics for the server
            </summary>
            <returns>The server statistics</returns>
        </member>
        <member name="M:NMemcached.Client.BinaryConnection.Version">
            <summary>
            Gets the version numbers of the server
            </summary>
            <returns>A string representation of the memcached server version number</returns>
        </member>
        <member name="P:NMemcached.Client.BinaryConnection.Endian">
            <summary>
            Gets or sets the endianess of the memcached server
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.NoOpLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:Common.Logging.ILog"/> instances that silently ignores
            logging requests.
            </summary>
            <seealso cref="P:Common.Logging.LogManager.Adapter"/>
            <seealso cref="T:Common.Logging.ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.Common#Logging#ILoggerFactoryAdapter#GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Logging.Factory.NamespaceDoc">
            <summary>
            This namespace contains convenience base classes for implementing your own <see cref="T:Common.Logging.ILoggerFactoryAdapter"/>s.
            </summary>
        </member>
        <member name="T:AssemblyDoc">
            <summary>
            This assembly contains the core functionality of the Common.Logging framework.
            In particular, checkout <see cref="T:Common.Logging.LogManager"/> and <see cref="T:Common.Logging.ILog"/> for usage information.
            </summary>
        </member>
        <member name="T:NMemcached.Client.GZipCompressor">
            <summary>
            Compresses and decompresses byte arrays using the GZip algorithm
            </summary>
        </member>
        <member name="M:NMemcached.Client.GZipCompressor.#ctor">
            <summary>
            Initializes a new instance of the GZipCompressor class
            </summary>
        </member>
        <member name="M:NMemcached.Client.GZipCompressor.Compress(System.Byte[])">
            <summary>
            Compresses a sequence of bytes using the GZip algorithm
            </summary>
            <param name="data">The sequence of bytes to compress</param>
            <returns>The compressed sequence of bytes</returns>
        </member>
        <member name="M:NMemcached.Client.GZipCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses a sequence of bytes using the GZip algorithm
            </summary>
            <param name="data">The sequence of bytes to decompress</param>
            <returns>The decompressed sequence of bytes</returns>
        </member>
        <member name="T:NMemcached.Client.Binary.BinaryRequest">
            <summary>
            Encapsulates the functionality for a binary request.
            </summary>
        </member>
        <member name="F:NMemcached.Client.Binary.BinaryRequest.NoOperation">
            <summary>
            Defines a no operation packet
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryRequest.#ctor">
            <summary>
            Initializes a new instance of the BinaryHeader class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryRequest.#ctor(NMemcached.Client.OpCode)">
            <summary>
            Initializes a new instance of the BinaryHeader class
            </summary>
            <param name="operation">Sets the packet operation code</param>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryRequest.ToBytes(NMemcached.Client.Endian)">
            <summary>
            Writes the content of the binary packet to a byte array that conforms to the memcached binary protocol
            </summary>
            <param name="endianMode">The byte order to use for primitives when creating the byte array</param>
            <returns>The content of the binary packet that conforms to the memcached binary protocol</returns>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryRequest.Type">
            <summary>
            Identifies the packet as a request
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.StorageAction">
            <summary>
            Specifies the storage operations available to the StorageActivity class
            </summary>
        </member>
        <member name="F:NMemcached.Client.Activities.StorageAction.Add">
            <summary>
            Adds the item to the cache if it does not alreay exist
            </summary>
        </member>
        <member name="F:NMemcached.Client.Activities.StorageAction.Append">
            <summary>
            Appends the item to an existing entry
            </summary>
        </member>
        <member name="F:NMemcached.Client.Activities.StorageAction.CheckAndSet">
            <summary>
            Sets the entry to the new value only if it was not updated since the last get operation
            </summary>
        </member>
        <member name="F:NMemcached.Client.Activities.StorageAction.Prepend">
            <summary>
            Prepends the item to an existing entry
            </summary>
        </member>
        <member name="F:NMemcached.Client.Activities.StorageAction.Replace">
            <summary>
            Replaces an existing entry with a new value
            </summary>
        </member>
        <member name="F:NMemcached.Client.Activities.StorageAction.Set">
            <summary>
            Sets the entry to the specified value overwriting any existing value
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.TraceLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:Common.Logging.ILog"/> instances that send 
            everything to the <see cref="T:System.Diagnostics.Trace"/> output stream.
            </summary>
            <remarks>
            Beware not to use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener"/> in combination with this logger factory
            as this would result in an endless loop for obvious reasons!
            </remarks>
            <seealso cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter"/>
            <seealso cref="P:Common.Logging.LogManager.Adapter"/>
            <seealso cref="T:Common.Logging.ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter"/> class using default settings.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties"/> for use when the GetLogger methods are called.
            <see cref="T:Common.Logging.ConfigurationSectionHandler"/> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Common.Logging.Simple.TraceLogger"/> instance.
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.UseTraceSource">
            <summary>
            Whether to use <see cref="T:System.Diagnostics.Trace"/>.<c>TraceXXXX(string,object[])</c> methods for logging
            or <see cref="T:System.Diagnostics.TraceSource"/>.
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.CapturingLoggerEvent">
            <summary>
            A logging event captured by <see cref="T:Common.Logging.Simple.CapturingLogger"/>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLoggerEvent.Source">
            <summary>
            The logger that logged this event
            </summary>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLoggerEvent.Level">
            <summary>
            The level used to log this event
            </summary>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLoggerEvent.MessageObject">
            <summary>
            The raw message object
            </summary>
        </member>
        <member name="F:Common.Logging.Simple.CapturingLoggerEvent.Exception">
            <summary>
            A logged exception
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CapturingLoggerEvent.#ctor(Common.Logging.Simple.CapturingLogger,Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Create a new event instance
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.CapturingLoggerEvent.RenderedMessage">
            <summary>
            Retrieves the formatted message text
            </summary>
        </member>
        <member name="T:CoverageExcludeAttribute">
            <summary>
            Indicates classes or members to be ignored by NCover
            </summary>
            <remarks>
            Note, the name is chosen, because TestDriven.NET uses it as //ea argument to "Test With... Coverage"
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Common.Logging.Configuration.LogSetting">
            <summary>
            Container used to hold configuration information from config file.
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:Common.Logging.Configuration.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="factoryAdapterType">
            The <see cref="T:Common.Logging.ILoggerFactoryAdapter"/> type 
            that will be used for creating <see cref="T:Common.Logging.ILog"/>
            </param>
            <param name="properties">
            Additional user supplied properties that are passed to the 
            <paramref name="factoryAdapterType"/>'s constructor.
            </param>
        </member>
        <member name="P:Common.Logging.Configuration.LogSetting.FactoryAdapterType">
            <summary>
            The <see cref="T:Common.Logging.ILoggerFactoryAdapter"/> type that will be used for creating <see cref="T:Common.Logging.ILog"/>
            instances.
            </summary>
        </member>
        <member name="P:Common.Logging.Configuration.LogSetting.Properties">
            <summary>
            Additional user supplied properties that are passed to the <see cref="P:Common.Logging.Configuration.LogSetting.FactoryAdapterType"/>'s constructor.
            </summary>
        </member>
        <member name="T:NMemcached.Client.FNVManaged">
            <summary>
            Hashes an array of bytes with the FNV1 or FNV1a algorithm
            </summary>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.#ctor">
            <summary>
            Initializes a new instance of the FNVManaged class
            </summary>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.#ctor(NMemcached.Client.FNVManaged.FNVAlgorithm)">
            <summary>
            Initializes a new instance of the FNVManaged class
            </summary>
            <param name="algorithm">The FNV algorithm used to generate the hash value</param>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FNVManaged class
            </summary>
            <param name="create64bit">Determines if a 64 bit hash is generated. A 32 bit hash is generated by default.</param>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.#ctor(NMemcached.Client.FNVManaged.FNVAlgorithm,System.Boolean)">
            <summary>
            Initializes a new instance of the FNVManaged class
            </summary>
            <param name="algorithm">The FNV algorithm used to generate the hash value</param>
            <param name="create64bit">Determines if a 64 bit hash is generated. A 32 bit hash is generated by default.</param>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.Initialize">
            <summary>
            Initializes the FNVManaged instance
            </summary>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.ToString">
            <summary>
            Returns a string representation of the FNVManaged class
            </summary>
            <returns>A string representation of the FNVManaged class</returns>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:NMemcached.Client.FNVManaged.HashFinal">
            <summary>
            Returns the computed hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="P:NMemcached.Client.FNVManaged.Algorithm">
            <summary>
            Gets the algorithm being used by the current instance.
            </summary>
        </member>
        <member name="T:NMemcached.Client.FNVManaged.FNVAlgorithm">
            <summary>
            Defines the FNV hashing algorithms available.
            </summary>
        </member>
        <member name="F:NMemcached.Client.FNVManaged.FNVAlgorithm.FNV1">
            <summary>
            The FNV1 hash algorithm
            </summary>
        </member>
        <member name="F:NMemcached.Client.FNVManaged.FNVAlgorithm.FNV1a">
            <summary>
            The FNV1a hash algorithm
            </summary>
        </member>
        <member name="T:NMemcached.Client.Binary.BinaryResponse">
            <summary>
            Represents a binary protocol response
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryResponse.Parse(System.Collections.Generic.IEnumerable{System.Byte[]},NMemcached.Client.Endian)">
            <summary>
            Creates a collection of BinaryResponse objects from a collection of server responses
            </summary>
            <param name="responses">A collection of byte arrays that contain the server responses</param>
            <param name="endian">The byte order to use when reading primitives from the responses</param>
            <returns>A collection of BinaryResponse objects from a collection of server responses</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryResponse.Parse(System.IO.Stream,NMemcached.Client.Endian)">
            <summary>
            Creates a collection of BinaryResponse objects from a byte stream
            </summary>
            <param name="inputStream">The server resonse stream from which the responses are read</param>
            <param name="endian">The byte order to use when reading primitives from the responses</param>
            <returns>A collection of BinaryResponse objects from the server response stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.BinaryResponse.Parse(System.Byte[],NMemcached.Client.Endian)">
            <summary>
            Creates a BinaryResponse from a byte array that contains a server response
            </summary>
            <param name="data">The byte array server response</param>
            <param name="endian">The byte order to use when reading primitives from the responses</param>
            <returns>The response object populated from the server response</returns>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryResponse.Type">
            <summary>
            Identifies the packet as a response
            </summary>
        </member>
        <member name="P:NMemcached.Client.Binary.BinaryResponse.ResponseCode">
            <summary>
            Gets the response code for the operation
            </summary>
        </member>
        <member name="T:NMemcached.Client.AsyncMemcachedClient">
            <summary>
            A Memcached connection that provides asynchronous methods for communicating with multiple memcached servers
            </summary>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the AsyncMemcachedClient class
            </summary>
            <param name="servers">A collection of server names without port number</param>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the AsyncMemcachedClient class
            </summary>
            <param name="servers">A collection of server names without port number</param>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.#ctor(NMemcached.Client.MemcachedClient)">
            <summary>
            Initializes a new instance of the AsyncMemcachedClient class
            </summary>
            <param name="synchronousClient">A MemcachedClient from which a new AsyncMemcachedClient is created</param>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.#ctor(NMemcached.Client.IConnectionProvider)">
            <summary>
            Initializes a new instance of the AsyncConnection class
            </summary>
            <param name="connectionProvider">The IConnectionProvider used by the client to get server connections</param>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginAdd(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to add an item to the cache
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginAdd(System.String,System.Object,System.DateTime,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to add an item to the cache
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginAppend(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to appends an item and existing cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginCheckAndSet(System.String,System.Object,System.UInt64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="casUnique">The unique value of an an existing entry</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginCheckAndSet(System.String,System.Object,System.DateTime,System.UInt64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that stores data for an existing key only if it has not been updated since the last get
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="casUnique">The unique value of an an existing entry</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginDecrement(System.String,System.UInt64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that decreases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="count">The amount by which the value is decremented</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginDelete(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that removes a cache entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginGet(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that reads a single entry from the cache
            </summary>
            <param name="key">The key for which the data is read</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginGetMultiple(System.AsyncCallback,System.Object,System.String[])">
            <summary>
            Begins an asynchronous operation that reads multiple entries from the cache
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginGetWithDetail(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that reads a single entry from the cache with detail information
            </summary>
            <param name="key">The key for which the data is read</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginGetWithDetailMultiple(System.AsyncCallback,System.Object,System.String[])">
            <summary>
            Begins an asynchronous operation that reads multiple entries from the cache with detail information
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <param name="keys">A list of keys for which the data is read</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginIncrement(System.String,System.UInt64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation that increases a numeric cached value at the specified key by the specified amount
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="count">The amount by which the value is incremented</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginPrepend(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to prepend an item to an existing cahce entry
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginReplace(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to replace an item in the cache
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginReplace(System.String,System.Object,System.DateTime,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to replace an item in the cache
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginSet(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to set an item to the cache
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.BeginSet(System.String,System.Object,System.DateTime,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to set an item to the cache
            </summary>
            <param name="key">The key to which the data is associated</param>
            <param name="data">The data to be stored in the cache</param>
            <param name="expiration">The timestamp at wich the entry expires</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for the request</param>
            <returns>An IAsyncResult that references the asynchronous operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.Create">
            <summary>
            Creates a new AsyncMemcachedClient from the application configuration
            </summary>
            <returns>A new AsyncMemcachedClient defined by the application configuration</returns>
            <remarks>
            <para>An AsynchMemcachedClient instance can be created using settings read from the applicaiton or web configuration file. The built-in configuration uses the included connection provider and does not have the ability to use custom connection providers.</para>
            <para>Example:</para>
            <code>
            &lt;configSections&gt;
                &lt;section name="nmemcached.client" type="NMemcached.Client.Configuration.NMemcachedConfigurationSection, NMemcached.Client" /&gt;
            &lt;/configSections&gt;
            &lt;nmemcached.client xmlns="http://memcached.protectedvoid.com/2011/06/configuration"&gt;
                &lt;connectionProvider&gt;
                    &lt;add server="localhost" compressionAlgorithm="Deflate" /&gt;
                    &lt;add server="someRemoteServer" port="15455" compressionAlgorithm="GZip" /&gt;
                &lt;/connectionProvider&gt;
            &lt;/nmemcached.client&gt;
            </code>
            <para>Note: An XSD is in the source tree and included with the binary distributions for intellisense.</para>
            <para>The ConnectionProvider element has an optional "hashAlgorithm" attribute that specifies the algorithm to use for they consistent hashing algorithm. The possible values are:</para>
            <list type="bullet">
                <item>
                    <term>fnv32</term>
                    <description>The FNV algorithm that produces a 32 bit hash value</description>
                </item>
                <item>
                    <term>fnv1a32 (default)</term>
                    <description>The FNV1a algorithm that produces a 32 bit hash value</description>
                </item>
                <item>
                    <term>fnv64</term>
                    <description>The FNV algorithm that produces a 64 bit hash value</description>
                </item>
                <item>
                    <term>fnv1a64</term>
                    <description>The FNV1a algorithm that produces a 64 bit hash value</description>
                </item>
                <item>
                    <term>md5</term>
                    <description>The MD5 algorithm that produces a 128 bit hash value</description>
                </item>
                <item>
                    <term>sha1</term>
                    <description>The SHA1 algorithm that produces a 160 bit hash value</description>
                </item>
                <item>
                    <term>sha256</term>
                    <description>The SHA1 algorithm that produces a 256 bit hash value</description>
                </item>
                <item>
                    <term>sha384</term>
                    <description>The SHA1 algorithm that produces a 384 bit hash value</description>
                </item>
                <item>
                    <term>sha512</term>
                    <description>The SHA1 algorithm that produces a 512 bit hash value</description>
                </item>
            </list>
            <para>Each "add" child element of "connectionProvider" represents a single Memcached server. The only required attribute is the "server" attribute that must contian the host name ir IP address of the destination. Any combination of optional attributes can be provided to configure individual server connections:</para>
            <list type="bullet">
                <item>
                    <term>port</term>
                    <description>A valid TCP/UDP port number. (default: "11211")</description>
                </item>
                <item>
                    <term>protocol</term>
                    <description>The Memcached communication protocol. Valid values are "text" and "binary". (default: "text")</description>
                </item>
                <item>
                    <term>transport</term>
                    <description>The transport protocol for the connection. Valid values are "tcp", "udp", "connectionOriented", "connectionless". (default: "tcp")</description>
                </item>
                <item>
                    <term>useCompression</term>
                    <description>Determines if data compression is used for items sent to the cache. (default: "false")</description>
                </item>
                <item>
                    <term>compressionAlgorithm</term>
                    <description>The algorithm to use for data compression if "useCompression" is set to "true". Valid values are "GZip" and "Deflate". (default: "GZip")</description>
                </item>
                <item>
                    <term>paylodEncoding</term>
                    <description>The character encoding of the data sent to the cache. Value values are "ASCII", "BigEndianUnicode", "Unicode", "UTF32", "UTF7", and "UTF8". (default: "UTF8")</description>
                </item>
                <item>
                    <term>protocolEncoding</term>
                    <description>The character encoding of the memcached protocol. Valid values are the same as the payloadEncoding attribute. (default: "UTF8")</description>
                </item>
                <item>
                    <term>sendTimeout</term>
                    <description>The number of milliseconds to wait to send data before throwing an exception. (default: 5000)</description>
                </item>
                <item>
                    <term>receiveTimeout</term>
                    <description>The number of milliseconds to wait to receive data before throwing an exception. (default: 5000)</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndAdd(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous add operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndAppend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous append operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndCheckAndSet(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous check and set operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndDecrement(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous decrement operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The value of the cache entry after the decrement operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndDelete(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous delete operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndGet(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous get operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The item read from the cache</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndGetWithDetail(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous get with detail operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The item read from the cache with detail information</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndGetMultiple(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous multi get operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>A keyed collection of items read from the cache</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndGetWithDetailMultiple(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous multi get with detail operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>A keyed collection of items read from the cache with detail information</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndIncrement(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous increment operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The value of the cache entry after the increment operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndPrepend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous prepend operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndReplace(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous replace operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.EndSet(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous set operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for the asynchronous operation</param>
            <returns>The response of the storage operation</returns>
        </member>
        <member name="M:NMemcached.Client.AsyncMemcachedClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the AsyncMemcachedClient, and optionally disposes of the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources</param>
        </member>
        <member name="T:NMemcached.Client.Activities.StorageActivity">
            <summary>
            Stores an item the cache
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.StorageActivity.#ctor">
            <summary>
            Initializes a new instance of the StorageActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.StorageActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.StorageActivity.StoreAction">
            <summary>
            Gets or sets the storage action
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.StorageActivity.Data">
            <summary>
            Gets or sets the data to be stored
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.StorageActivity.Expiration">
            <summary>
            Gets or sets the expiration timestamp of the item stored
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.StorageActivity.CasUnique">
            <summary>
            Gets or sets the check and set unique value
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.StorageActivity.Response">
            <summary>
            Gets or sets the response code from the storage operation
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.GetMultipleActivity">
            <summary>
            Reads multiple items from the cache
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetMultipleActivity.#ctor">
            <summary>
            Initializes a new instance of the GetMultipleActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetMultipleActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.GetMultipleActivity.Keys">
            <summary>
            Gets or sets the keys of the items to read
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.GetMultipleActivity.Result">
            <summary>
            Gets or sets a collection of items keyed by cache key
            </summary>
        </member>
        <member name="T:NMemcached.Client.ServerConnectionCollection">
            <summary>
            A specialized collection of ServerConnection objects
            </summary>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.#ctor">
            <summary>
            Initializes a new instance of the ServerConnectionCollection class
            </summary>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the ServerConnectionCollection class
            </summary>
            <param name="serverNames">A collection of server names to add to the collection using the default port</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the ServerConnectionCollection class
            </summary>
            <param name="serverNames">A collection of server names to add to the collection</param>
            <param name="port">The port number for each server</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.#ctor(System.Collections.Generic.IEnumerable{NMemcached.Client.ServerConnection})">
            <summary>
            Initializes a new instance of the ServerConnectionCollection class
            </summary>
            <param name="collection">A collection whose elements are copied to the new collection</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ServerConnectionCollection class
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.Add(System.String,System.Int32,System.Nullable{NMemcached.Client.ConnectionType},System.Nullable{System.Net.TransportType})">
            <summary>
            Adds a connection to the list of available servers
            </summary>
            <param name="hostNameOrAddress">The host name or IP address of the server</param>
            <param name="port">Optiona. The tcp port number of the remote host.</param>
            <param name="protocol">Optional. The Memcached protocol to use for the new server connection.</param>
            <param name="transport">Optional. The transport protocol to use for the new server connection.</param>
        </member>
        <member name="M:NMemcached.Client.ServerConnectionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface and returns the data needed to serialize the ServerConnectionCollection instance
            </summary>
            <param name="info">A SerializationInfo object that contains the information required to serialize the ServerConnectionCollection instance</param>
            <param name="context">A StreamingContext structure that contains the source and destination of the serialized stream associated with the ServerConnectionCollection instance</param>
        </member>
        <member name="P:NMemcached.Client.ServerConnectionCollection.DefaultConnectionType">
            <summary>
            Gets or sets the default conneciton type for new servers added by host name
            </summary>
        </member>
        <member name="P:NMemcached.Client.ServerConnectionCollection.DefaultTransportType">
            <summary>
            Gets or sets the default transport type for new servers added by host name
            </summary>
        </member>
        <member name="T:NMemcached.Client.MemcachedObjectCache">
            <summary>
            An <see cref="T:System.Runtime.Caching.ObjectCache"/> implementation that uses Memcached as the backing store
            </summary>
            <remarks>
            <para>Memcached does not support cache regions. Any value passed to the region arguments are ignored.</para>
            </remarks>
        </member>
        <member name="F:NMemcached.Client.MemcachedObjectCache.DefaultExpiration">
            <summary>
            The expiration for cache items set in the class indexer. The default value is 15 minutes.
            </summary>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.#ctor(NMemcached.Client.IConnectionProvider)">
            <summary>
            Initializes a new instance of the MemcachedObjectCache class
            </summary>
            <param name="connectionProvider">Optional. An IConnectionProvider used to communicate with the Memcached server(s)</param>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Adds a new item to the cache or returns the cached item if the specified key already exists.
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="value">The object to be cached</param>
            <param name="policy">An object that contains eviction details for the cache entry</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>The value of the cache entry if it already exists; otherwise, null</returns>
            <exception cref="T:System.ArgumentNullException">key, value, or policy is null.</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Adds a new item to the cache or returns the cached item if the specified key already exists.
            </summary>
            <param name="value">The object to insert</param>
            <param name="policy">An object that contains eviction details for the cache entry</param>
            <returns>The value of the cache entry if it already exists; otherwise, null</returns>
            <exception cref="T:System.ArgumentNullException">value or policy is null.</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Adds a new item to the cache or returns the cached item if the specified key already exists.
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="value">The object to be cached</param>
            <param name="absoluteExpiration">The fixed date and time the entry will expire.</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>The value of the cache entry if it already exists; otherwise, null</returns>
            <exception cref="T:System.ArgumentNullException">key, value, or absoluteExpiration is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.Contains(System.String,System.String)">
            <summary>
            Checks whether the cache entry already exists in the cache
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>True if the cache item exists; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a CacheEntryChangeMonitor object that can trigger events in response to changes to specified cache entries
            </summary>
            <param name="keys">The unique identifiers for cache entries to monitor. </param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>A change monitor that monitors cache entries in the cache. </returns>
            <exception cref="T:System.NotSupportedException">Entry change monitoring is not supported by Memcached.</exception>
            <exception cref="T:System.ArgumentNullException">keys is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.Get(System.String,System.String)">
            <summary>
            Gets the specified cache entry
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>The cache entry if it exists; otherwise, null</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.GetCacheItem(System.String,System.String)">
            <summary>
            Gets the specified cache entry
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>The cache entry if it exists; otherwise, null</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.GetCount(System.String)">
            <summary>
            Gets the count of items in the cache.
            </summary>
            <param name="regionName">Optional. A named region in the cache where the entry can be added.</param>
            <returns>The number of cache entries in the cache.</returns>
            <exception cref="T:System.NotSupportedException">Cache entry counts are not supported by Memcached</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.GetEnumerator">
            <summary>
            Creates an enumerator that can be used to iterate through a collection of cache entries. 
            </summary>
            <returns>The enumerator object that provides access to the cache entries in the cache.</returns>
            <exception cref="T:System.NotSupportedException">Enumerating cache entries is not supported by Memcached</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets a set of cache entries that correspond to the specified keys
            </summary>
            <param name="keys">A colleciton of unique identifiers for the cache entries to get</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added</param>
            <returns>A dictionary of key/value pairs that represent cache entries. </returns>
            <exception cref="T:System.ArgumentNullException">keys is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.Remove(System.String,System.String)">
            <summary>
            Removes an entry from the cache
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added</param>
            <returns>The item removed from the cache, or null if the entry was not found</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts an entry into the cache, overwriting an existing entry with the same key.
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="value">The object to insert</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added</param>
            <exception cref="T:System.ArgumentNullException">key, value, or policy is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts an entry into the cache, overwriting an existing entry with the same key.
            </summary>
            <param name="item">The cache item to add.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
            <exception cref="T:System.ArgumentNullException">item or policy is null</exception>
        </member>
        <member name="M:NMemcached.Client.MemcachedObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts an entry into the cache, overwriting an existing entry with the same key.
            </summary>
            <param name="key">The unique identifier for the cache entry</param>
            <param name="value">The object to insert</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">Optional. A named region in the cache where the entry can be added</param>
            <exception cref="T:System.ArgumentNullException">key, value, absoluteExpiration is null</exception>
        </member>
        <member name="P:NMemcached.Client.MemcachedObjectCache.DefaultCacheCapabilities">
            <summary>
            Gets the description of the features the ObjectCache provides.
            </summary>
        </member>
        <member name="P:NMemcached.Client.MemcachedObjectCache.Name">
            <summary>
            Gets the name of the MemcachedObjectCache instance
            </summary>
        </member>
        <member name="P:NMemcached.Client.MemcachedObjectCache.Item(System.String)">
            <summary>
            Gets or sets the default indexer for the MemcachedObjectCache class
            </summary>
            <param name="key">The unique identifier for an entry in the cache</param>
            <returns>The value of the specified cache entry; or, null if no item exists with the specified key</returns>
            <exception cref="T:System.ArgumentNullException">key is null or white space</exception>
        </member>
        <member name="T:NMemcached.Client.MemcachedException">
            <summary>
            The exception that is thrown when a Memcached server returns an error
            </summary>
        </member>
        <member name="M:NMemcached.Client.MemcachedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MemcachedException class
            </summary>
            <param name="message">The error message returned from the server.</param>
        </member>
        <member name="M:NMemcached.Client.MemcachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MemcachedException class
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Common.Logging.FormatMessageHandler">
            <summary>
             The type of method that is passed into e.g. <see cref="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})"/> 
             and allows the callback method to "submit" it's message to the underlying output system.
            </summary>
            <param name="format">the format argument as in <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">the argument list as in <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <seealso cref="T:Common.Logging.ILog"/>
             <author>Erich Eichinger</author>
        </member>
        <member name="T:NMemcached.Client.Configuration.NamespaceDoc">
            <summary>
            Contains classes for creating a memcached client from the application or web configuration file.
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.GetWithDetailActivity">
            <summary>
            Reads an item from the cache with detail information
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetWithDetailActivity.#ctor">
            <summary>
            Initializes a new instance of the GetWithDetailActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetWithDetailActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.GetWithDetailActivity.Result">
            <summary>
            Get or sets the detail value read from the cache
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.GetMultipleWithDetailActivity">
            <summary>
            Reads multiple items from the cache with detail information
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetMultipleWithDetailActivity.#ctor">
            <summary>
            Initializes a new instance of the GetMultipleWithDetailActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.GetMultipleWithDetailActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.GetMultipleWithDetailActivity.Keys">
            <summary>
            Gets or sets the keys of the items to read
            </summary>
        </member>
        <member name="P:NMemcached.Client.Activities.GetMultipleWithDetailActivity.Result">
            <summary>
            Gets or sets a collection of detail entries keyed by cache key
            </summary>
        </member>
        <member name="T:NMemcached.Client.Activities.DeleteActivity">
            <summary>
            Deletes an item from the cache
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.DeleteActivity.#ctor">
            <summary>
            Initializes a new instance of the DeleteActivity class
            </summary>
        </member>
        <member name="M:NMemcached.Client.Activities.DeleteActivity.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Performs the execution of the activity
            </summary>
            <param name="context">The execution context under which the activity executes</param>
        </member>
        <member name="P:NMemcached.Client.Activities.DeleteActivity.Response">
            <summary>
            Gets or sets the response code from the delete operation
            </summary>
        </member>
        <member name="T:NMemcached.Client.ResponseCode">
            <summary>
            Defines the possible response codes from a Memcached operation
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.NoError">
            <summary>
            Inicates no error has occured
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.KeyNotFound">
            <summary>
            Inicates that an operation that requires an existing item could not find the key
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.KeyExists">
            <summary>
            Inicates that an entry already exists in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.ValueTooLarge">
            <summary>
            Indicates the value to be cached exceeds the size limit
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.InvalidArguments">
            <summary>
            Indicates that a command was sent with invalid arguments
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.ItemNotStored">
            <summary>
            Indicates that an item was not stored in the cache
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.IncDecNonNumber">
            <summary>
            Indicates that the client has attempted to increment or decrement a non-numeric value
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.UnknownCommand">
            <summary>
            Indicates an unknown command was sent to the server
            </summary>
        </member>
        <member name="F:NMemcached.Client.ResponseCode.OutOfMemory">
            <summary>
            Indicates that the server has run out of memory
            </summary>
        </member>
        <member name="T:Common.Logging.Simple.CommonLoggingTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> implementation sending all <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see> output to 
            the Common.Logging infrastructure.
            </summary>
            <remarks>
            This listener captures all output sent by calls to <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see> and
            and <see cref="T:System.Diagnostics.TraceSource"/> and sends it to an <see cref="T:Common.Logging.ILog"/> instance.<br/>
            The <see cref="T:Common.Logging.ILog"/> instance to be used is obtained by calling
            <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>. The name of the logger is created by passing 
            this listener's <see cref="P:System.Diagnostics.TraceListener.Name"/> and any <c>source</c> or <c>category</c> passed 
            into this listener (see <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)"/> or <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])"/> for example).
            </remarks>
            <example>
            The snippet below shows how to add and configure this listener to your app.config:
            <code lang="XML">
            &lt;system.diagnostics&gt;
              &lt;sharedListeners&gt;
                &lt;add name="Diagnostics"
                     type="Common.Logging.Simple.CommonLoggingTraceListener, Common.Logging"
                     initializeData="DefaultTraceEventType=Information; LoggerNameFormat={listenerName}.{sourceName}"&gt;
                  &lt;filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/&gt;
                &lt;/add&gt;
              &lt;/sharedListeners&gt;
              &lt;trace&gt;
                &lt;listeners&gt;
                  &lt;add name="Diagnostics" /&gt;
                &lt;/listeners&gt;
              &lt;/trace&gt;
            &lt;/system.diagnostics&gt;
            </code>
            </example>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor">
            <summary>
            Creates a new instance with the default name "Diagnostics" and <see cref="T:Common.Logging.LogLevel"/> "Trace".
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor(System.String)">
            <summary>
            Creates a new instance initialized with properties from the <paramref name="initializeData"/>. string.
            </summary>
            <remarks>
            <paramref name="initializeData"/> is a semicolon separated string of name/value pairs, where each pair has
            the form <c>key=value</c>. E.g.
            "<c>Name=MyLoggerName;LogLevel=Debug</c>"
            </remarks>
            <param name="initializeData">a semicolon separated list of name/value pairs.</param>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new instance initialized with the specified properties.
            </summary>
            <param name="properties">name/value configuration properties.</param>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Logs the given message to the Common.Logging infrastructure.
            </summary>
            <param name="eventType">the eventType</param>
            <param name="source">the <see cref="T:System.Diagnostics.TraceSource"/> name or category name passed into e.g. <see cref="M:System.Diagnostics.Trace.Write(System.Object,System.String)"/>.</param>
            <param name="id">the id of this event</param>
            <param name="format">the message format</param>
            <param name="args">the message arguments</param>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.Object)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.Object,System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.String,System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.Object)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.Object,System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.String,System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
            </summary>
        </member>
        <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
            </summary>
        </member>
        <member name="P:Common.Logging.Simple.CommonLoggingTraceListener.DefaultTraceEventType">
            <summary>
            Sets the default <see cref="T:System.Diagnostics.TraceEventType"/> to use for logging
            all events emitted by <see cref="T:System.Diagnostics.Trace"/><c>.Write(...)</c> and
            <see cref="T:System.Diagnostics.Trace"/><c>.WriteLine(...)</c> methods.
            </summary>
            <remarks>
            This listener captures all output sent by calls to <see cref="T:System.Diagnostics.Trace"/> and
            sends it to an <see cref="T:Common.Logging.ILog"/> instance using the <see cref="T:Common.Logging.LogLevel"/> specified
            on <see cref="T:Common.Logging.LogLevel"/>.
            </remarks>
        </member>
        <member name="P:Common.Logging.Simple.CommonLoggingTraceListener.LoggerNameFormat">
            <summary>
            Format to use for creating the logger name. Defaults to "{listenerName}.{sourceName}".
            </summary>
            <remarks>
            Available placeholders are:
            <list type="bullet">
            <item>{listenerName}: the configured name of this listener instance.</item>
            <item>{sourceName}: the trace source name an event originates from (see e.g. <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])"/>.</item>
            </list>
            </remarks>
        </member>
        <member name="T:Common.Logging.NamespaceDoc">
            <summary>
            This namespace contains all core classes making up the Common.Logging framework.
            </summary>
        </member>
        <member name="T:Common.Logging.LogLevel">
            <summary>
            The 7 possible logging levels
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="F:Common.Logging.LogLevel.All">
            <summary>
            All logging levels
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Trace">
            <summary>
            A trace logging level
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Debug">
            <summary>
            A debug logging level
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Info">
            <summary>
            A info logging level
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Warn">
            <summary>
            A warn logging level
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Error">
            <summary>
            An error logging level
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Fatal">
            <summary>
            A fatal logging level
            </summary>
        </member>
        <member name="F:Common.Logging.LogLevel.Off">
            <summary>
            Do not log anything.
            </summary>
        </member>
        <member name="T:NMemcached.Client.Binary.EndianBinaryReader">
            <summary>
            Reads primitive data types as binary values with the specified endianness in a specific encoding
            </summary>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the EndianBinaryReader class based on the supplied stream.
            </summary>
            <param name="input">The stream from which data is read</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the EndianBinaryReader class based on the supplied stream and specific character encoding.
            </summary>
            <param name="input">The stream from which data is read</param>
            <param name="encoding">The character encoding for strings read from the output</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.#ctor(System.IO.Stream,NMemcached.Client.Endian)">
            <summary>
            Initializes a new instance of the EndianBinaryReader class based on the supplied stream and and endianness.
            </summary>
            <param name="input">The stream from which data is read</param>
            <param name="endian">A value the determines the mode of operation for the binary reader</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,NMemcached.Client.Endian)">
            <summary>
            Initializes a new instance of the EndianBinaryReader class based on the supplied stream, a specific character encoding, and endianness.
            </summary>
            <param name="input">The stream from which data is read</param>
            <param name="encoding">The character encoding for strings read from the output</param>
            <param name="endian">A value the determines the mode of operation for the binary reader</param>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value and advances the stream position by 16 bytes
            </summary>
            <returns>The decimal value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadDouble">
            <summary>
            Reads a double precision value and advances the stream position by 8 bytes
            </summary>
            <returns>The double precision value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadInt16">
            <summary>
            Reads a signed short ineger value and advances the stream position by 2 bytes
            </summary>
            <returns>The signed short integer value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadInt32">
            <summary>
            Reads a signed integer value and advances the stream position by 4 bytes
            </summary>
            <returns>The signed integer value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadInt64">
            <summary>
            Reads a signed long integer value and advances the stream position by 8 bytes
            </summary>
            <returns>The signed long integer value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadSingle">
            <summary>
            Reads a single precision value and advances the stream position by 4 bytes
            </summary>
            <returns>The single precision value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadUInt16">
            <summary>
            Reads an unsigned short integer value and advances the stream position by 2 bytes
            </summary>
            <returns>The unsigned short integer value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadUInt32">
            <summary>
            Reads an unsigned integer value and advances the stream position by 4 bytes
            </summary>
            <returns>The unsigned integer value read from the current stream</returns>
        </member>
        <member name="M:NMemcached.Client.Binary.EndianBinaryReader.ReadUInt64">
            <summary>
            Reads an unsigned long integer value and advances the stream position by 8 bytes
            </summary>
            <returns>The unsigned long integer value read from the current stream</returns>
        </member>
        <member name="P:NMemcached.Client.Binary.EndianBinaryReader.Endian">
            <summary>
            Gets or sets the endian mode of the binary writer
            </summary>
        </member>
    </members>
</doc>
